/**
 * Aspose.Words for Cloud API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import http = require("http");
import request = require("request");

import { Configuration } from "./internal/configuration";
import { ObjectSerializer } from "./internal/objectSerializer";
import { invokeApiMethod } from "./internal/requestHelper";
import * as model from "./model/model";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export class WordsApi {
    /*
    * API configuration
    */
    public configuration: Configuration;

    /*
     * @param appSID App SID.
     * @param appKey App key.
     * @param baseUrl Base api Url.
     * @param debugMode A value indicating whether debug mode. In debug mode all requests and responses are logged to console.
     */
    constructor(appSID: string, appKey: string, baseUrl?: string, debugMode?: boolean) {
        this.configuration = new Configuration(appSID, appKey, baseUrl, debugMode);
    }

    /*
     * @summary Accept all revisions in document
     * @param name The document name.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    public async acceptAllRevisions(requestObj: model.acceptAllRevisionsRequest): Promise<{response: http.ClientResponse, body: model.RevisionsModificationResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/revisions/acceptAll"
            .replace("{" + "name" + "}", String(requestObj.name));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling acceptAllRevisions.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "POST",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "RevisionsModificationResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Add new or update existing document property.
     * @param name The document name.
     * @param propertyName The property name.
     * @param property The property with new value.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     * @param revisionDateTime The date and time to use for revisions.
     */
    public async createOrUpdateDocumentProperty(requestObj: model.createOrUpdateDocumentPropertyRequest): Promise<{response: http.ClientResponse, body: model.DocumentPropertyResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/documentProperties/{propertyName}"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "propertyName" + "}", String(requestObj.propertyName));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling createOrUpdateDocumentProperty.');
        }

        // verify required parameter 'requestObj.propertyName' is not null or undefined
        if (requestObj.propertyName === null || requestObj.propertyName === undefined) {
            throw new Error('Required parameter "requestObj.propertyName" was null or undefined when calling createOrUpdateDocumentProperty.');
        }

        // verify required parameter 'requestObj.property' is not null or undefined
        if (requestObj.property === null || requestObj.property === undefined) {
            throw new Error('Required parameter "requestObj.property" was null or undefined when calling createOrUpdateDocumentProperty.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.revisionAuthor !== undefined) {
            queryParameters.RevisionAuthor = ObjectSerializer.serialize(requestObj.revisionAuthor, "string");
        }

        if (requestObj.revisionDateTime !== undefined) {
            queryParameters.RevisionDateTime = ObjectSerializer.serialize(requestObj.revisionDateTime, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "POST",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
            body: ObjectSerializer.serialize(requestObj.property, "DocumentProperty"),
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "DocumentPropertyResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Resets border properties to default values.              'nodePath' should refer to node with cell or row
     * @param name The document name.
     * @param nodePath Path to node with border(node should be cell or row).
     * @param index Object&#39;s index
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     * @param revisionDateTime The date and time to use for revisions.
     */
    public async deleteBorder(requestObj: model.deleteBorderRequest): Promise<{response: http.ClientResponse, body: model.BorderResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/borders/{index}"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "nodePath" + "}", String(requestObj.nodePath))
            .replace("{" + "index" + "}", String(requestObj.index));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling deleteBorder.');
        }

        // verify required parameter 'requestObj.nodePath' is not null or undefined
        if (requestObj.nodePath === null || requestObj.nodePath === undefined) {
            throw new Error('Required parameter "requestObj.nodePath" was null or undefined when calling deleteBorder.');
        }

        // verify required parameter 'requestObj.index' is not null or undefined
        if (requestObj.index === null || requestObj.index === undefined) {
            throw new Error('Required parameter "requestObj.index" was null or undefined when calling deleteBorder.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.revisionAuthor !== undefined) {
            queryParameters.RevisionAuthor = ObjectSerializer.serialize(requestObj.revisionAuthor, "string");
        }

        if (requestObj.revisionDateTime !== undefined) {
            queryParameters.RevisionDateTime = ObjectSerializer.serialize(requestObj.revisionDateTime, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "DELETE",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "BorderResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Resets borders properties to default values.              'nodePath' should refer to node with cell or row
     * @param name The document name.
     * @param nodePath Path to node with borders(node should be cell or row).
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     * @param revisionDateTime The date and time to use for revisions.
     */
    public async deleteBorders(requestObj: model.deleteBordersRequest): Promise<{response: http.ClientResponse, body: model.BordersResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/borders"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "nodePath" + "}", String(requestObj.nodePath));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling deleteBorders.');
        }

        // verify required parameter 'requestObj.nodePath' is not null or undefined
        if (requestObj.nodePath === null || requestObj.nodePath === undefined) {
            throw new Error('Required parameter "requestObj.nodePath" was null or undefined when calling deleteBorders.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.revisionAuthor !== undefined) {
            queryParameters.RevisionAuthor = ObjectSerializer.serialize(requestObj.revisionAuthor, "string");
        }

        if (requestObj.revisionDateTime !== undefined) {
            queryParameters.RevisionDateTime = ObjectSerializer.serialize(requestObj.revisionDateTime, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "DELETE",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "BordersResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Remove comment from document.
     * @param name The file name.
     * @param commentIndex Comment index
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     * @param revisionDateTime The date and time to use for revisions.
     */
    public async deleteComment(requestObj: model.deleteCommentRequest): Promise<{response: http.ClientResponse, body: model.AsposeResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/comments/{commentIndex}"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "commentIndex" + "}", String(requestObj.commentIndex));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling deleteComment.');
        }

        // verify required parameter 'requestObj.commentIndex' is not null or undefined
        if (requestObj.commentIndex === null || requestObj.commentIndex === undefined) {
            throw new Error('Required parameter "requestObj.commentIndex" was null or undefined when calling deleteComment.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.revisionAuthor !== undefined) {
            queryParameters.RevisionAuthor = ObjectSerializer.serialize(requestObj.revisionAuthor, "string");
        }

        if (requestObj.revisionDateTime !== undefined) {
            queryParameters.RevisionDateTime = ObjectSerializer.serialize(requestObj.revisionDateTime, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "DELETE",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "AsposeResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Remove macros from document.
     * @param name The file name.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     * @param revisionDateTime The date and time to use for revisions.
     */
    public async deleteDocumentMacros(requestObj: model.deleteDocumentMacrosRequest): Promise<{response: http.ClientResponse, body: model.AsposeResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/macros"
            .replace("{" + "name" + "}", String(requestObj.name));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling deleteDocumentMacros.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.revisionAuthor !== undefined) {
            queryParameters.RevisionAuthor = ObjectSerializer.serialize(requestObj.revisionAuthor, "string");
        }

        if (requestObj.revisionDateTime !== undefined) {
            queryParameters.RevisionDateTime = ObjectSerializer.serialize(requestObj.revisionDateTime, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "DELETE",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "AsposeResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Delete document property.
     * @param name The document name.
     * @param propertyName The property name.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     * @param revisionDateTime The date and time to use for revisions.
     */
    public async deleteDocumentProperty(requestObj: model.deleteDocumentPropertyRequest): Promise<{response: http.ClientResponse, body: model.AsposeResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/documentProperties/{propertyName}"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "propertyName" + "}", String(requestObj.propertyName));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling deleteDocumentProperty.');
        }

        // verify required parameter 'requestObj.propertyName' is not null or undefined
        if (requestObj.propertyName === null || requestObj.propertyName === undefined) {
            throw new Error('Required parameter "requestObj.propertyName" was null or undefined when calling deleteDocumentProperty.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.revisionAuthor !== undefined) {
            queryParameters.RevisionAuthor = ObjectSerializer.serialize(requestObj.revisionAuthor, "string");
        }

        if (requestObj.revisionDateTime !== undefined) {
            queryParameters.RevisionDateTime = ObjectSerializer.serialize(requestObj.revisionDateTime, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "DELETE",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "AsposeResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Delete watermark (for deleting last watermark from the document).
     * @param name The document name.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     * @param revisionDateTime The date and time to use for revisions.
     */
    public async deleteDocumentWatermark(requestObj: model.deleteDocumentWatermarkRequest): Promise<{response: http.ClientResponse, body: model.DocumentResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/watermark"
            .replace("{" + "name" + "}", String(requestObj.name));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling deleteDocumentWatermark.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.revisionAuthor !== undefined) {
            queryParameters.RevisionAuthor = ObjectSerializer.serialize(requestObj.revisionAuthor, "string");
        }

        if (requestObj.revisionDateTime !== undefined) {
            queryParameters.RevisionDateTime = ObjectSerializer.serialize(requestObj.revisionDateTime, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "DELETE",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "DocumentResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Removes drawing object from document.
     * @param name The file name.
     * @param index Object&#39;s index
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     * @param revisionDateTime The date and time to use for revisions.
     * @param nodePath Path to node, which contains collection of drawing objects.
     */
    public async deleteDrawingObject(requestObj: model.deleteDrawingObjectRequest): Promise<{response: http.ClientResponse, body: model.AsposeResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/drawingObjects/{index}"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "index" + "}", String(requestObj.index));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling deleteDrawingObject.');
        }

        // verify required parameter 'requestObj.index' is not null or undefined
        if (requestObj.index === null || requestObj.index === undefined) {
            throw new Error('Required parameter "requestObj.index" was null or undefined when calling deleteDrawingObject.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.revisionAuthor !== undefined) {
            queryParameters.RevisionAuthor = ObjectSerializer.serialize(requestObj.revisionAuthor, "string");
        }

        if (requestObj.revisionDateTime !== undefined) {
            queryParameters.RevisionDateTime = ObjectSerializer.serialize(requestObj.revisionDateTime, "string");
        }

        if (requestObj.nodePath !== undefined) {
            queryParameters.NodePath = ObjectSerializer.serialize(requestObj.nodePath, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "DELETE",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "AsposeResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Delete field from document.
     * @param name The file name.
     * @param index Object&#39;s index
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     * @param revisionDateTime The date and time to use for revisions.
     * @param nodePath Path to node, which contains collection of fields.
     */
    public async deleteField(requestObj: model.deleteFieldRequest): Promise<{response: http.ClientResponse, body: model.AsposeResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/fields/{index}"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "index" + "}", String(requestObj.index));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling deleteField.');
        }

        // verify required parameter 'requestObj.index' is not null or undefined
        if (requestObj.index === null || requestObj.index === undefined) {
            throw new Error('Required parameter "requestObj.index" was null or undefined when calling deleteField.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.revisionAuthor !== undefined) {
            queryParameters.RevisionAuthor = ObjectSerializer.serialize(requestObj.revisionAuthor, "string");
        }

        if (requestObj.revisionDateTime !== undefined) {
            queryParameters.RevisionDateTime = ObjectSerializer.serialize(requestObj.revisionDateTime, "string");
        }

        if (requestObj.nodePath !== undefined) {
            queryParameters.NodePath = ObjectSerializer.serialize(requestObj.nodePath, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "DELETE",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "AsposeResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Remove fields from section paragraph.
     * @param name The file name.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     * @param revisionDateTime The date and time to use for revisions.
     * @param nodePath Path to node, which contains collection of fields.
     */
    public async deleteFields(requestObj: model.deleteFieldsRequest): Promise<{response: http.ClientResponse, body: model.AsposeResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/fields"
            .replace("{" + "name" + "}", String(requestObj.name));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling deleteFields.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.revisionAuthor !== undefined) {
            queryParameters.RevisionAuthor = ObjectSerializer.serialize(requestObj.revisionAuthor, "string");
        }

        if (requestObj.revisionDateTime !== undefined) {
            queryParameters.RevisionDateTime = ObjectSerializer.serialize(requestObj.revisionDateTime, "string");
        }

        if (requestObj.nodePath !== undefined) {
            queryParameters.NodePath = ObjectSerializer.serialize(requestObj.nodePath, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "DELETE",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "AsposeResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Removes footnote from document.
     * @param name The file name.
     * @param index Object&#39;s index
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     * @param revisionDateTime The date and time to use for revisions.
     * @param nodePath Path to node, which contains collection of footnotes.
     */
    public async deleteFootnote(requestObj: model.deleteFootnoteRequest): Promise<{response: http.ClientResponse, body: model.AsposeResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/footnotes/{index}"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "index" + "}", String(requestObj.index));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling deleteFootnote.');
        }

        // verify required parameter 'requestObj.index' is not null or undefined
        if (requestObj.index === null || requestObj.index === undefined) {
            throw new Error('Required parameter "requestObj.index" was null or undefined when calling deleteFootnote.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.revisionAuthor !== undefined) {
            queryParameters.RevisionAuthor = ObjectSerializer.serialize(requestObj.revisionAuthor, "string");
        }

        if (requestObj.revisionDateTime !== undefined) {
            queryParameters.RevisionDateTime = ObjectSerializer.serialize(requestObj.revisionDateTime, "string");
        }

        if (requestObj.nodePath !== undefined) {
            queryParameters.NodePath = ObjectSerializer.serialize(requestObj.nodePath, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "DELETE",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "AsposeResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Removes form field from document.
     * @param name The document name.
     * @param index Object&#39;s index
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     * @param revisionDateTime The date and time to use for revisions.
     * @param nodePath Path to node that contains collection of formfields.
     */
    public async deleteFormField(requestObj: model.deleteFormFieldRequest): Promise<{response: http.ClientResponse, body: model.AsposeResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/formfields/{index}"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "index" + "}", String(requestObj.index));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling deleteFormField.');
        }

        // verify required parameter 'requestObj.index' is not null or undefined
        if (requestObj.index === null || requestObj.index === undefined) {
            throw new Error('Required parameter "requestObj.index" was null or undefined when calling deleteFormField.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.revisionAuthor !== undefined) {
            queryParameters.RevisionAuthor = ObjectSerializer.serialize(requestObj.revisionAuthor, "string");
        }

        if (requestObj.revisionDateTime !== undefined) {
            queryParameters.RevisionDateTime = ObjectSerializer.serialize(requestObj.revisionDateTime, "string");
        }

        if (requestObj.nodePath !== undefined) {
            queryParameters.NodePath = ObjectSerializer.serialize(requestObj.nodePath, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "DELETE",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "AsposeResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Delete header/footer from document.
     * @param name The document name.
     * @param index Object&#39;s index
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     * @param revisionDateTime The date and time to use for revisions.
     * @param sectionPath Path to parent section.
     */
    public async deleteHeaderFooter(requestObj: model.deleteHeaderFooterRequest): Promise<{response: http.ClientResponse, body: model.AsposeResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{sectionPath}/headersfooters/{index}"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "index" + "}", String(requestObj.index));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling deleteHeaderFooter.');
        }

        // verify required parameter 'requestObj.index' is not null or undefined
        if (requestObj.index === null || requestObj.index === undefined) {
            throw new Error('Required parameter "requestObj.index" was null or undefined when calling deleteHeaderFooter.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.revisionAuthor !== undefined) {
            queryParameters.RevisionAuthor = ObjectSerializer.serialize(requestObj.revisionAuthor, "string");
        }

        if (requestObj.revisionDateTime !== undefined) {
            queryParameters.RevisionDateTime = ObjectSerializer.serialize(requestObj.revisionDateTime, "string");
        }

        if (requestObj.sectionPath !== undefined) {
            queryParameters.SectionPath = ObjectSerializer.serialize(requestObj.sectionPath, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "DELETE",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "AsposeResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Delete document headers and footers.
     * @param name The document name.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     * @param revisionDateTime The date and time to use for revisions.
     * @param sectionPath Path to parent section.
     * @param headersFootersTypes List of types of headers and footers.
     */
    public async deleteHeadersFooters(requestObj: model.deleteHeadersFootersRequest): Promise<{response: http.ClientResponse, body: model.AsposeResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{sectionPath}/headersfooters"
            .replace("{" + "name" + "}", String(requestObj.name));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling deleteHeadersFooters.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.revisionAuthor !== undefined) {
            queryParameters.RevisionAuthor = ObjectSerializer.serialize(requestObj.revisionAuthor, "string");
        }

        if (requestObj.revisionDateTime !== undefined) {
            queryParameters.RevisionDateTime = ObjectSerializer.serialize(requestObj.revisionDateTime, "string");
        }

        if (requestObj.sectionPath !== undefined) {
            queryParameters.SectionPath = ObjectSerializer.serialize(requestObj.sectionPath, "string");
        }

        if (requestObj.headersFootersTypes !== undefined) {
            queryParameters.HeadersFootersTypes = ObjectSerializer.serialize(requestObj.headersFootersTypes, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "DELETE",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "AsposeResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Removes OfficeMath object from document.
     * @param name The file name.
     * @param index Object&#39;s index
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     * @param revisionDateTime The date and time to use for revisions.
     * @param nodePath Path to node, which contains collection of OfficeMath objects.
     */
    public async deleteOfficeMathObject(requestObj: model.deleteOfficeMathObjectRequest): Promise<{response: http.ClientResponse, body: model.AsposeResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/OfficeMathObjects/{index}"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "index" + "}", String(requestObj.index));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling deleteOfficeMathObject.');
        }

        // verify required parameter 'requestObj.index' is not null or undefined
        if (requestObj.index === null || requestObj.index === undefined) {
            throw new Error('Required parameter "requestObj.index" was null or undefined when calling deleteOfficeMathObject.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.revisionAuthor !== undefined) {
            queryParameters.RevisionAuthor = ObjectSerializer.serialize(requestObj.revisionAuthor, "string");
        }

        if (requestObj.revisionDateTime !== undefined) {
            queryParameters.RevisionDateTime = ObjectSerializer.serialize(requestObj.revisionDateTime, "string");
        }

        if (requestObj.nodePath !== undefined) {
            queryParameters.NodePath = ObjectSerializer.serialize(requestObj.nodePath, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "DELETE",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "AsposeResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Remove paragraph from section.
     * @param name The file name.
     * @param index Object&#39;s index
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     * @param revisionDateTime The date and time to use for revisions.
     * @param nodePath Path to node which contains paragraphs.
     */
    public async deleteParagraph(requestObj: model.deleteParagraphRequest): Promise<{response: http.ClientResponse, body: model.AsposeResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/paragraphs/{index}"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "index" + "}", String(requestObj.index));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling deleteParagraph.');
        }

        // verify required parameter 'requestObj.index' is not null or undefined
        if (requestObj.index === null || requestObj.index === undefined) {
            throw new Error('Required parameter "requestObj.index" was null or undefined when calling deleteParagraph.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.revisionAuthor !== undefined) {
            queryParameters.RevisionAuthor = ObjectSerializer.serialize(requestObj.revisionAuthor, "string");
        }

        if (requestObj.revisionDateTime !== undefined) {
            queryParameters.RevisionDateTime = ObjectSerializer.serialize(requestObj.revisionDateTime, "string");
        }

        if (requestObj.nodePath !== undefined) {
            queryParameters.NodePath = ObjectSerializer.serialize(requestObj.nodePath, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "DELETE",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "AsposeResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Removes run from document.
     * @param name The file name.
     * @param paragraphPath Path to parent paragraph.
     * @param index Object&#39;s index
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     * @param revisionDateTime The date and time to use for revisions.
     */
    public async deleteRun(requestObj: model.deleteRunRequest): Promise<{response: http.ClientResponse, body: model.AsposeResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{paragraphPath}/runs/{index}"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "paragraphPath" + "}", String(requestObj.paragraphPath))
            .replace("{" + "index" + "}", String(requestObj.index));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling deleteRun.');
        }

        // verify required parameter 'requestObj.paragraphPath' is not null or undefined
        if (requestObj.paragraphPath === null || requestObj.paragraphPath === undefined) {
            throw new Error('Required parameter "requestObj.paragraphPath" was null or undefined when calling deleteRun.');
        }

        // verify required parameter 'requestObj.index' is not null or undefined
        if (requestObj.index === null || requestObj.index === undefined) {
            throw new Error('Required parameter "requestObj.index" was null or undefined when calling deleteRun.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.revisionAuthor !== undefined) {
            queryParameters.RevisionAuthor = ObjectSerializer.serialize(requestObj.revisionAuthor, "string");
        }

        if (requestObj.revisionDateTime !== undefined) {
            queryParameters.RevisionDateTime = ObjectSerializer.serialize(requestObj.revisionDateTime, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "DELETE",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "AsposeResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Delete a table.
     * @param name The document name.
     * @param index Object&#39;s index
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     * @param revisionDateTime The date and time to use for revisions.
     * @param nodePath Path to node, which contains tables.
     */
    public async deleteTable(requestObj: model.deleteTableRequest): Promise<{response: http.ClientResponse, body: model.AsposeResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/tables/{index}"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "index" + "}", String(requestObj.index));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling deleteTable.');
        }

        // verify required parameter 'requestObj.index' is not null or undefined
        if (requestObj.index === null || requestObj.index === undefined) {
            throw new Error('Required parameter "requestObj.index" was null or undefined when calling deleteTable.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.revisionAuthor !== undefined) {
            queryParameters.RevisionAuthor = ObjectSerializer.serialize(requestObj.revisionAuthor, "string");
        }

        if (requestObj.revisionDateTime !== undefined) {
            queryParameters.RevisionDateTime = ObjectSerializer.serialize(requestObj.revisionDateTime, "string");
        }

        if (requestObj.nodePath !== undefined) {
            queryParameters.NodePath = ObjectSerializer.serialize(requestObj.nodePath, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "DELETE",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "AsposeResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Delete a table cell.
     * @param name The document name.
     * @param tableRowPath Path to table row.
     * @param index Object&#39;s index
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     * @param revisionDateTime The date and time to use for revisions.
     */
    public async deleteTableCell(requestObj: model.deleteTableCellRequest): Promise<{response: http.ClientResponse, body: model.AsposeResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{tableRowPath}/cells/{index}"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "tableRowPath" + "}", String(requestObj.tableRowPath))
            .replace("{" + "index" + "}", String(requestObj.index));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling deleteTableCell.');
        }

        // verify required parameter 'requestObj.tableRowPath' is not null or undefined
        if (requestObj.tableRowPath === null || requestObj.tableRowPath === undefined) {
            throw new Error('Required parameter "requestObj.tableRowPath" was null or undefined when calling deleteTableCell.');
        }

        // verify required parameter 'requestObj.index' is not null or undefined
        if (requestObj.index === null || requestObj.index === undefined) {
            throw new Error('Required parameter "requestObj.index" was null or undefined when calling deleteTableCell.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.revisionAuthor !== undefined) {
            queryParameters.RevisionAuthor = ObjectSerializer.serialize(requestObj.revisionAuthor, "string");
        }

        if (requestObj.revisionDateTime !== undefined) {
            queryParameters.RevisionDateTime = ObjectSerializer.serialize(requestObj.revisionDateTime, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "DELETE",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "AsposeResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Delete a table row.
     * @param name The document name.
     * @param tablePath Path to table.
     * @param index Object&#39;s index
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     * @param revisionDateTime The date and time to use for revisions.
     */
    public async deleteTableRow(requestObj: model.deleteTableRowRequest): Promise<{response: http.ClientResponse, body: model.AsposeResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{tablePath}/rows/{index}"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "tablePath" + "}", String(requestObj.tablePath))
            .replace("{" + "index" + "}", String(requestObj.index));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling deleteTableRow.');
        }

        // verify required parameter 'requestObj.tablePath' is not null or undefined
        if (requestObj.tablePath === null || requestObj.tablePath === undefined) {
            throw new Error('Required parameter "requestObj.tablePath" was null or undefined when calling deleteTableRow.');
        }

        // verify required parameter 'requestObj.index' is not null or undefined
        if (requestObj.index === null || requestObj.index === undefined) {
            throw new Error('Required parameter "requestObj.index" was null or undefined when calling deleteTableRow.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.revisionAuthor !== undefined) {
            queryParameters.RevisionAuthor = ObjectSerializer.serialize(requestObj.revisionAuthor, "string");
        }

        if (requestObj.revisionDateTime !== undefined) {
            queryParameters.RevisionDateTime = ObjectSerializer.serialize(requestObj.revisionDateTime, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "DELETE",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "AsposeResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Unprotect document.
     * @param name The document name.
     * @param protectionRequest with protection settings.            
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    public async deleteUnprotectDocument(requestObj: model.deleteUnprotectDocumentRequest): Promise<{response: http.ClientResponse, body: model.ProtectionDataResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/protection"
            .replace("{" + "name" + "}", String(requestObj.name));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling deleteUnprotectDocument.');
        }

        // verify required parameter 'requestObj.protectionRequest' is not null or undefined
        if (requestObj.protectionRequest === null || requestObj.protectionRequest === undefined) {
            throw new Error('Required parameter "requestObj.protectionRequest" was null or undefined when calling deleteUnprotectDocument.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "DELETE",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
            body: ObjectSerializer.serialize(requestObj.protectionRequest, "ProtectionRequest"),
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "ProtectionDataResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Return a border. 'nodePath' should refer to node with cell or row
     * @param name The document name.
     * @param nodePath Path to node with border(node should be cell or row).
     * @param index Object&#39;s index
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     */
    public async getBorder(requestObj: model.getBorderRequest): Promise<{response: http.ClientResponse, body: model.BorderResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/borders/{index}"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "nodePath" + "}", String(requestObj.nodePath))
            .replace("{" + "index" + "}", String(requestObj.index));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling getBorder.');
        }

        // verify required parameter 'requestObj.nodePath' is not null or undefined
        if (requestObj.nodePath === null || requestObj.nodePath === undefined) {
            throw new Error('Required parameter "requestObj.nodePath" was null or undefined when calling getBorder.');
        }

        // verify required parameter 'requestObj.index' is not null or undefined
        if (requestObj.index === null || requestObj.index === undefined) {
            throw new Error('Required parameter "requestObj.index" was null or undefined when calling getBorder.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "BorderResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Return a collection of borders. 'nodePath' should refer to node with cell or row
     * @param name The document name.
     * @param nodePath Path to node with borders(node should be cell or row).
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     */
    public async getBorders(requestObj: model.getBordersRequest): Promise<{response: http.ClientResponse, body: model.BordersResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/borders"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "nodePath" + "}", String(requestObj.nodePath));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling getBorders.');
        }

        // verify required parameter 'requestObj.nodePath' is not null or undefined
        if (requestObj.nodePath === null || requestObj.nodePath === undefined) {
            throw new Error('Required parameter "requestObj.nodePath" was null or undefined when calling getBorders.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "BordersResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Get comment from document.
     * @param name The file name.
     * @param commentIndex Comment index
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     */
    public async getComment(requestObj: model.getCommentRequest): Promise<{response: http.ClientResponse, body: model.CommentResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/comments/{commentIndex}"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "commentIndex" + "}", String(requestObj.commentIndex));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling getComment.');
        }

        // verify required parameter 'requestObj.commentIndex' is not null or undefined
        if (requestObj.commentIndex === null || requestObj.commentIndex === undefined) {
            throw new Error('Required parameter "requestObj.commentIndex" was null or undefined when calling getComment.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "CommentResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Get comments from document.
     * @param name The file name.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     */
    public async getComments(requestObj: model.getCommentsRequest): Promise<{response: http.ClientResponse, body: model.CommentsResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/comments"
            .replace("{" + "name" + "}", String(requestObj.name));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling getComments.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "CommentsResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Read document common info.
     * @param documentName The file name.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     */
    public async getDocument(requestObj: model.getDocumentRequest): Promise<{response: http.ClientResponse, body: model.DocumentResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{documentName}"
            .replace("{" + "documentName" + "}", String(requestObj.documentName));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.documentName' is not null or undefined
        if (requestObj.documentName === null || requestObj.documentName === undefined) {
            throw new Error('Required parameter "requestObj.documentName" was null or undefined when calling getDocument.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "DocumentResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Read document bookmark data by its name.
     * @param name The document name.
     * @param bookmarkName The bookmark name.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     */
    public async getDocumentBookmarkByName(requestObj: model.getDocumentBookmarkByNameRequest): Promise<{response: http.ClientResponse, body: model.BookmarkResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/bookmarks/{bookmarkName}"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "bookmarkName" + "}", String(requestObj.bookmarkName));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling getDocumentBookmarkByName.');
        }

        // verify required parameter 'requestObj.bookmarkName' is not null or undefined
        if (requestObj.bookmarkName === null || requestObj.bookmarkName === undefined) {
            throw new Error('Required parameter "requestObj.bookmarkName" was null or undefined when calling getDocumentBookmarkByName.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "BookmarkResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Read document bookmarks common info.
     * @param name The document name.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     */
    public async getDocumentBookmarks(requestObj: model.getDocumentBookmarksRequest): Promise<{response: http.ClientResponse, body: model.BookmarksResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/bookmarks"
            .replace("{" + "name" + "}", String(requestObj.name));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling getDocumentBookmarks.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "BookmarksResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Read document drawing object common info by its index or convert to format specified.
     * @param name The document name.
     * @param index Object&#39;s index
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param nodePath Path to node, which contains collection of drawing objects.
     */
    public async getDocumentDrawingObjectByIndex(requestObj: model.getDocumentDrawingObjectByIndexRequest): Promise<{response: http.ClientResponse, body: model.DrawingObjectResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/drawingObjects/{index}"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "index" + "}", String(requestObj.index));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling getDocumentDrawingObjectByIndex.');
        }

        // verify required parameter 'requestObj.index' is not null or undefined
        if (requestObj.index === null || requestObj.index === undefined) {
            throw new Error('Required parameter "requestObj.index" was null or undefined when calling getDocumentDrawingObjectByIndex.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.nodePath !== undefined) {
            queryParameters.NodePath = ObjectSerializer.serialize(requestObj.nodePath, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "DrawingObjectResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Read drawing object image data.
     * @param name The document name.
     * @param index Object&#39;s index
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param nodePath Path to node, which contains collection of drawing objects.
     */
    public async getDocumentDrawingObjectImageData(requestObj: model.getDocumentDrawingObjectImageDataRequest): Promise<{response: http.ClientResponse, body: Buffer}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/drawingObjects/{index}/imageData"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "index" + "}", String(requestObj.index));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling getDocumentDrawingObjectImageData.');
        }

        // verify required parameter 'requestObj.index' is not null or undefined
        if (requestObj.index === null || requestObj.index === undefined) {
            throw new Error('Required parameter "requestObj.index" was null or undefined when calling getDocumentDrawingObjectImageData.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.nodePath !== undefined) {
            queryParameters.NodePath = ObjectSerializer.serialize(requestObj.nodePath, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            encoding: null,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "Buffer");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Get drawing object OLE data.
     * @param name The document name.
     * @param index Object&#39;s index
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param nodePath Path to node, which contains collection of drawing objects.
     */
    public async getDocumentDrawingObjectOleData(requestObj: model.getDocumentDrawingObjectOleDataRequest): Promise<{response: http.ClientResponse, body: Buffer}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/drawingObjects/{index}/oleData"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "index" + "}", String(requestObj.index));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling getDocumentDrawingObjectOleData.');
        }

        // verify required parameter 'requestObj.index' is not null or undefined
        if (requestObj.index === null || requestObj.index === undefined) {
            throw new Error('Required parameter "requestObj.index" was null or undefined when calling getDocumentDrawingObjectOleData.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.nodePath !== undefined) {
            queryParameters.NodePath = ObjectSerializer.serialize(requestObj.nodePath, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            encoding: null,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "Buffer");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Read document drawing objects common info.
     * @param name The document name.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param nodePath Path to node, which contains collection of drawing objects.
     */
    public async getDocumentDrawingObjects(requestObj: model.getDocumentDrawingObjectsRequest): Promise<{response: http.ClientResponse, body: model.DrawingObjectsResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/drawingObjects"
            .replace("{" + "name" + "}", String(requestObj.name));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling getDocumentDrawingObjects.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.nodePath !== undefined) {
            queryParameters.NodePath = ObjectSerializer.serialize(requestObj.nodePath, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "DrawingObjectsResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Read document field names.
     * @param name The document name.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param useNonMergeFields If true, result includes \&quot;mustache\&quot; field names.
     */
    public async getDocumentFieldNames(requestObj: model.getDocumentFieldNamesRequest): Promise<{response: http.ClientResponse, body: model.FieldNamesResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/mailMergeFieldNames"
            .replace("{" + "name" + "}", String(requestObj.name));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling getDocumentFieldNames.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.useNonMergeFields !== undefined) {
            queryParameters.UseNonMergeFields = ObjectSerializer.serialize(requestObj.useNonMergeFields, "boolean");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "FieldNamesResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Read document hyperlink by its index.
     * @param name The document name.
     * @param hyperlinkIndex The hyperlink index.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     */
    public async getDocumentHyperlinkByIndex(requestObj: model.getDocumentHyperlinkByIndexRequest): Promise<{response: http.ClientResponse, body: model.HyperlinkResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/hyperlinks/{hyperlinkIndex}"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "hyperlinkIndex" + "}", String(requestObj.hyperlinkIndex));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling getDocumentHyperlinkByIndex.');
        }

        // verify required parameter 'requestObj.hyperlinkIndex' is not null or undefined
        if (requestObj.hyperlinkIndex === null || requestObj.hyperlinkIndex === undefined) {
            throw new Error('Required parameter "requestObj.hyperlinkIndex" was null or undefined when calling getDocumentHyperlinkByIndex.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "HyperlinkResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Read document hyperlinks common info.
     * @param name The document name.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     */
    public async getDocumentHyperlinks(requestObj: model.getDocumentHyperlinksRequest): Promise<{response: http.ClientResponse, body: model.HyperlinksResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/hyperlinks"
            .replace("{" + "name" + "}", String(requestObj.name));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling getDocumentHyperlinks.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "HyperlinksResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary This resource represents one of the paragraphs contained in the document.
     * @param name The document name.
     * @param index Object&#39;s index
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param nodePath Path to node which contains paragraphs.
     */
    public async getDocumentParagraph(requestObj: model.getDocumentParagraphRequest): Promise<{response: http.ClientResponse, body: model.ParagraphResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/paragraphs/{index}"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "index" + "}", String(requestObj.index));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling getDocumentParagraph.');
        }

        // verify required parameter 'requestObj.index' is not null or undefined
        if (requestObj.index === null || requestObj.index === undefined) {
            throw new Error('Required parameter "requestObj.index" was null or undefined when calling getDocumentParagraph.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.nodePath !== undefined) {
            queryParameters.NodePath = ObjectSerializer.serialize(requestObj.nodePath, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "ParagraphResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary This resource represents run of text contained in the document.
     * @param name The document name.
     * @param paragraphPath Path to parent paragraph.
     * @param index Object&#39;s index
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     */
    public async getDocumentParagraphRun(requestObj: model.getDocumentParagraphRunRequest): Promise<{response: http.ClientResponse, body: model.RunResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{paragraphPath}/runs/{index}"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "paragraphPath" + "}", String(requestObj.paragraphPath))
            .replace("{" + "index" + "}", String(requestObj.index));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling getDocumentParagraphRun.');
        }

        // verify required parameter 'requestObj.paragraphPath' is not null or undefined
        if (requestObj.paragraphPath === null || requestObj.paragraphPath === undefined) {
            throw new Error('Required parameter "requestObj.paragraphPath" was null or undefined when calling getDocumentParagraphRun.');
        }

        // verify required parameter 'requestObj.index' is not null or undefined
        if (requestObj.index === null || requestObj.index === undefined) {
            throw new Error('Required parameter "requestObj.index" was null or undefined when calling getDocumentParagraphRun.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "RunResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary This resource represents font of run.
     * @param name The document name.
     * @param paragraphPath Path to parent paragraph.
     * @param index Object&#39;s index
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     */
    public async getDocumentParagraphRunFont(requestObj: model.getDocumentParagraphRunFontRequest): Promise<{response: http.ClientResponse, body: model.FontResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{paragraphPath}/runs/{index}/font"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "paragraphPath" + "}", String(requestObj.paragraphPath))
            .replace("{" + "index" + "}", String(requestObj.index));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling getDocumentParagraphRunFont.');
        }

        // verify required parameter 'requestObj.paragraphPath' is not null or undefined
        if (requestObj.paragraphPath === null || requestObj.paragraphPath === undefined) {
            throw new Error('Required parameter "requestObj.paragraphPath" was null or undefined when calling getDocumentParagraphRunFont.');
        }

        // verify required parameter 'requestObj.index' is not null or undefined
        if (requestObj.index === null || requestObj.index === undefined) {
            throw new Error('Required parameter "requestObj.index" was null or undefined when calling getDocumentParagraphRunFont.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "FontResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary This resource represents collection of runs in the paragraph.
     * @param name The document name.
     * @param paragraphPath Path to parent paragraph.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     */
    public async getDocumentParagraphRuns(requestObj: model.getDocumentParagraphRunsRequest): Promise<{response: http.ClientResponse, body: model.RunsResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{paragraphPath}/runs"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "paragraphPath" + "}", String(requestObj.paragraphPath));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling getDocumentParagraphRuns.');
        }

        // verify required parameter 'requestObj.paragraphPath' is not null or undefined
        if (requestObj.paragraphPath === null || requestObj.paragraphPath === undefined) {
            throw new Error('Required parameter "requestObj.paragraphPath" was null or undefined when calling getDocumentParagraphRuns.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "RunsResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Return a list of paragraphs that are contained in the document.
     * @param name The document name.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param nodePath Path to node which contains paragraphs.
     */
    public async getDocumentParagraphs(requestObj: model.getDocumentParagraphsRequest): Promise<{response: http.ClientResponse, body: model.ParagraphLinkCollectionResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/paragraphs"
            .replace("{" + "name" + "}", String(requestObj.name));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling getDocumentParagraphs.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.nodePath !== undefined) {
            queryParameters.NodePath = ObjectSerializer.serialize(requestObj.nodePath, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "ParagraphLinkCollectionResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Read document properties info.
     * @param name The document&#39;s name.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     */
    public async getDocumentProperties(requestObj: model.getDocumentPropertiesRequest): Promise<{response: http.ClientResponse, body: model.DocumentPropertiesResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/documentProperties"
            .replace("{" + "name" + "}", String(requestObj.name));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling getDocumentProperties.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "DocumentPropertiesResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Read document property info by the property name.
     * @param name The document name.
     * @param propertyName The property name.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     */
    public async getDocumentProperty(requestObj: model.getDocumentPropertyRequest): Promise<{response: http.ClientResponse, body: model.DocumentPropertyResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/documentProperties/{propertyName}"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "propertyName" + "}", String(requestObj.propertyName));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling getDocumentProperty.');
        }

        // verify required parameter 'requestObj.propertyName' is not null or undefined
        if (requestObj.propertyName === null || requestObj.propertyName === undefined) {
            throw new Error('Required parameter "requestObj.propertyName" was null or undefined when calling getDocumentProperty.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "DocumentPropertyResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Read document protection common info.
     * @param name The document name.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     */
    public async getDocumentProtection(requestObj: model.getDocumentProtectionRequest): Promise<{response: http.ClientResponse, body: model.ProtectionDataResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/protection"
            .replace("{" + "name" + "}", String(requestObj.name));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling getDocumentProtection.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "ProtectionDataResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Read document statistics.
     * @param name The document name.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param includeComments Support including/excluding comments from the WordCount. Default value is \&quot;true\&quot;.
     * @param includeFootnotes Support including/excluding footnotes from the WordCount. Default value is \&quot;false\&quot;.
     * @param includeTextInShapes Support including/excluding shape&#39;s text from the WordCount. Default value is \&quot;false\&quot;
     */
    public async getDocumentStatistics(requestObj: model.getDocumentStatisticsRequest): Promise<{response: http.ClientResponse, body: model.StatDataResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/statistics"
            .replace("{" + "name" + "}", String(requestObj.name));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling getDocumentStatistics.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.includeComments !== undefined) {
            queryParameters.IncludeComments = ObjectSerializer.serialize(requestObj.includeComments, "boolean");
        }

        if (requestObj.includeFootnotes !== undefined) {
            queryParameters.IncludeFootnotes = ObjectSerializer.serialize(requestObj.includeFootnotes, "boolean");
        }

        if (requestObj.includeTextInShapes !== undefined) {
            queryParameters.IncludeTextInShapes = ObjectSerializer.serialize(requestObj.includeTextInShapes, "boolean");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "StatDataResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Read document text items.
     * @param name The document name.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     */
    public async getDocumentTextItems(requestObj: model.getDocumentTextItemsRequest): Promise<{response: http.ClientResponse, body: model.TextItemsResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/textItems"
            .replace("{" + "name" + "}", String(requestObj.name));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling getDocumentTextItems.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "TextItemsResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Export the document into the specified format.
     * @param name The file name.
     * @param format The destination format.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param outPath Path to save result
     * @param fontsLocation Folder in filestorage with custom fonts.
     */
    public async getDocumentWithFormat(requestObj: model.getDocumentWithFormatRequest): Promise<{response: http.ClientResponse, body: Buffer}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}"
            .replace("{" + "name" + "}", String(requestObj.name));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling getDocumentWithFormat.');
        }

        // verify required parameter 'requestObj.format' is not null or undefined
        if (requestObj.format === null || requestObj.format === undefined) {
            throw new Error('Required parameter "requestObj.format" was null or undefined when calling getDocumentWithFormat.');
        }

        if (requestObj.format !== undefined) {
            queryParameters.Format = ObjectSerializer.serialize(requestObj.format, "string");
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.outPath !== undefined) {
            queryParameters.OutPath = ObjectSerializer.serialize(requestObj.outPath, "string");
        }

        if (requestObj.fontsLocation !== undefined) {
            queryParameters.FontsLocation = ObjectSerializer.serialize(requestObj.fontsLocation, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            encoding: null,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "Buffer");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Get field from document.
     * @param name The file name.
     * @param index Object&#39;s index
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param nodePath Path to node, which contains collection of fields.
     */
    public async getField(requestObj: model.getFieldRequest): Promise<{response: http.ClientResponse, body: model.FieldResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/fields/{index}"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "index" + "}", String(requestObj.index));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling getField.');
        }

        // verify required parameter 'requestObj.index' is not null or undefined
        if (requestObj.index === null || requestObj.index === undefined) {
            throw new Error('Required parameter "requestObj.index" was null or undefined when calling getField.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.nodePath !== undefined) {
            queryParameters.NodePath = ObjectSerializer.serialize(requestObj.nodePath, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "FieldResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Get fields from document.
     * @param name The file name.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param nodePath Path to node, which contains collection of fields.
     */
    public async getFields(requestObj: model.getFieldsRequest): Promise<{response: http.ClientResponse, body: model.FieldsResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/fields"
            .replace("{" + "name" + "}", String(requestObj.name));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling getFields.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.nodePath !== undefined) {
            queryParameters.NodePath = ObjectSerializer.serialize(requestObj.nodePath, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "FieldsResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Read footnote by index.
     * @param name The document name.
     * @param index Object&#39;s index
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param nodePath Path to node, which contains collection of footnotes.
     */
    public async getFootnote(requestObj: model.getFootnoteRequest): Promise<{response: http.ClientResponse, body: model.FootnoteResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/footnotes/{index}"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "index" + "}", String(requestObj.index));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling getFootnote.');
        }

        // verify required parameter 'requestObj.index' is not null or undefined
        if (requestObj.index === null || requestObj.index === undefined) {
            throw new Error('Required parameter "requestObj.index" was null or undefined when calling getFootnote.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.nodePath !== undefined) {
            queryParameters.NodePath = ObjectSerializer.serialize(requestObj.nodePath, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "FootnoteResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Get footnotes from document.
     * @param name The file name.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param nodePath Path to node, which contains collection of footnotes.
     */
    public async getFootnotes(requestObj: model.getFootnotesRequest): Promise<{response: http.ClientResponse, body: model.FootnotesResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/footnotes"
            .replace("{" + "name" + "}", String(requestObj.name));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling getFootnotes.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.nodePath !== undefined) {
            queryParameters.NodePath = ObjectSerializer.serialize(requestObj.nodePath, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "FootnotesResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Returns representation of an one of the form field.
     * @param name The document name.
     * @param index Object&#39;s index
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param nodePath Path to node that contains collection of formfields.
     */
    public async getFormField(requestObj: model.getFormFieldRequest): Promise<{response: http.ClientResponse, body: model.FormFieldResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/formfields/{index}"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "index" + "}", String(requestObj.index));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling getFormField.');
        }

        // verify required parameter 'requestObj.index' is not null or undefined
        if (requestObj.index === null || requestObj.index === undefined) {
            throw new Error('Required parameter "requestObj.index" was null or undefined when calling getFormField.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.nodePath !== undefined) {
            queryParameters.NodePath = ObjectSerializer.serialize(requestObj.nodePath, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "FormFieldResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Get form fields from document.
     * @param name The file name.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param nodePath Path to node containing collection of form fields.
     */
    public async getFormFields(requestObj: model.getFormFieldsRequest): Promise<{response: http.ClientResponse, body: model.FormFieldsResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/formfields"
            .replace("{" + "name" + "}", String(requestObj.name));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling getFormFields.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.nodePath !== undefined) {
            queryParameters.NodePath = ObjectSerializer.serialize(requestObj.nodePath, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "FormFieldsResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Return a header/footer that is contained in the document.
     * @param name The document name.
     * @param headerFooterIndex Header/footer index.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param filterByType List of types of headers and footers.
     */
    public async getHeaderFooter(requestObj: model.getHeaderFooterRequest): Promise<{response: http.ClientResponse, body: model.HeaderFooterResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/headersfooters/{headerFooterIndex}"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "headerFooterIndex" + "}", String(requestObj.headerFooterIndex));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling getHeaderFooter.');
        }

        // verify required parameter 'requestObj.headerFooterIndex' is not null or undefined
        if (requestObj.headerFooterIndex === null || requestObj.headerFooterIndex === undefined) {
            throw new Error('Required parameter "requestObj.headerFooterIndex" was null or undefined when calling getHeaderFooter.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.filterByType !== undefined) {
            queryParameters.FilterByType = ObjectSerializer.serialize(requestObj.filterByType, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "HeaderFooterResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Return a header/footer that is contained in the document.
     * @param name The document name.
     * @param headerFooterIndex Header/footer index.
     * @param sectionIndex Section index.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param filterByType List of types of headers and footers.
     */
    public async getHeaderFooterOfSection(requestObj: model.getHeaderFooterOfSectionRequest): Promise<{response: http.ClientResponse, body: model.HeaderFooterResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/sections/{sectionIndex}/headersfooters/{headerFooterIndex}"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "headerFooterIndex" + "}", String(requestObj.headerFooterIndex))
            .replace("{" + "sectionIndex" + "}", String(requestObj.sectionIndex));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling getHeaderFooterOfSection.');
        }

        // verify required parameter 'requestObj.headerFooterIndex' is not null or undefined
        if (requestObj.headerFooterIndex === null || requestObj.headerFooterIndex === undefined) {
            throw new Error('Required parameter "requestObj.headerFooterIndex" was null or undefined when calling getHeaderFooterOfSection.');
        }

        // verify required parameter 'requestObj.sectionIndex' is not null or undefined
        if (requestObj.sectionIndex === null || requestObj.sectionIndex === undefined) {
            throw new Error('Required parameter "requestObj.sectionIndex" was null or undefined when calling getHeaderFooterOfSection.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.filterByType !== undefined) {
            queryParameters.FilterByType = ObjectSerializer.serialize(requestObj.filterByType, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "HeaderFooterResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Return a list of header/footers that are contained in the document.
     * @param name The document name.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param sectionPath Path to parent section.
     * @param filterByType List of types of headers and footers.
     */
    public async getHeaderFooters(requestObj: model.getHeaderFootersRequest): Promise<{response: http.ClientResponse, body: model.HeaderFootersResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{sectionPath}/headersfooters"
            .replace("{" + "name" + "}", String(requestObj.name));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling getHeaderFooters.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.sectionPath !== undefined) {
            queryParameters.SectionPath = ObjectSerializer.serialize(requestObj.sectionPath, "string");
        }

        if (requestObj.filterByType !== undefined) {
            queryParameters.FilterByType = ObjectSerializer.serialize(requestObj.filterByType, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "HeaderFootersResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Read OfficeMath object by index.
     * @param name The document name.
     * @param index Object&#39;s index
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param nodePath Path to node, which contains collection of OfficeMath objects.
     */
    public async getOfficeMathObject(requestObj: model.getOfficeMathObjectRequest): Promise<{response: http.ClientResponse, body: model.OfficeMathObjectResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/OfficeMathObjects/{index}"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "index" + "}", String(requestObj.index));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling getOfficeMathObject.');
        }

        // verify required parameter 'requestObj.index' is not null or undefined
        if (requestObj.index === null || requestObj.index === undefined) {
            throw new Error('Required parameter "requestObj.index" was null or undefined when calling getOfficeMathObject.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.nodePath !== undefined) {
            queryParameters.NodePath = ObjectSerializer.serialize(requestObj.nodePath, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "OfficeMathObjectResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Get OfficeMath objects from document.
     * @param name The file name.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param nodePath Path to node, which contains collection of OfficeMath objects.
     */
    public async getOfficeMathObjects(requestObj: model.getOfficeMathObjectsRequest): Promise<{response: http.ClientResponse, body: model.OfficeMathObjectsResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/OfficeMathObjects"
            .replace("{" + "name" + "}", String(requestObj.name));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling getOfficeMathObjects.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.nodePath !== undefined) {
            queryParameters.NodePath = ObjectSerializer.serialize(requestObj.nodePath, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "OfficeMathObjectsResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Get document section by index.
     * @param name The document name.
     * @param sectionIndex Section index
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     */
    public async getSection(requestObj: model.getSectionRequest): Promise<{response: http.ClientResponse, body: model.SectionResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/sections/{sectionIndex}"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "sectionIndex" + "}", String(requestObj.sectionIndex));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling getSection.');
        }

        // verify required parameter 'requestObj.sectionIndex' is not null or undefined
        if (requestObj.sectionIndex === null || requestObj.sectionIndex === undefined) {
            throw new Error('Required parameter "requestObj.sectionIndex" was null or undefined when calling getSection.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "SectionResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Get page setup of section.
     * @param name The document name.
     * @param sectionIndex Section index
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     */
    public async getSectionPageSetup(requestObj: model.getSectionPageSetupRequest): Promise<{response: http.ClientResponse, body: model.SectionPageSetupResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/sections/{sectionIndex}/pageSetup"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "sectionIndex" + "}", String(requestObj.sectionIndex));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling getSectionPageSetup.');
        }

        // verify required parameter 'requestObj.sectionIndex' is not null or undefined
        if (requestObj.sectionIndex === null || requestObj.sectionIndex === undefined) {
            throw new Error('Required parameter "requestObj.sectionIndex" was null or undefined when calling getSectionPageSetup.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "SectionPageSetupResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Return a list of sections that are contained in the document.
     * @param name The document name.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     */
    public async getSections(requestObj: model.getSectionsRequest): Promise<{response: http.ClientResponse, body: model.SectionLinkCollectionResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/sections"
            .replace("{" + "name" + "}", String(requestObj.name));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling getSections.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "SectionLinkCollectionResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Return a table.
     * @param name The document name.
     * @param index Object&#39;s index
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param nodePath Path to node, which contains tables.
     */
    public async getTable(requestObj: model.getTableRequest): Promise<{response: http.ClientResponse, body: model.TableResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/tables/{index}"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "index" + "}", String(requestObj.index));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling getTable.');
        }

        // verify required parameter 'requestObj.index' is not null or undefined
        if (requestObj.index === null || requestObj.index === undefined) {
            throw new Error('Required parameter "requestObj.index" was null or undefined when calling getTable.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.nodePath !== undefined) {
            queryParameters.NodePath = ObjectSerializer.serialize(requestObj.nodePath, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "TableResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Return a table cell.
     * @param name The document name.
     * @param tableRowPath Path to table row.
     * @param index Object&#39;s index
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     */
    public async getTableCell(requestObj: model.getTableCellRequest): Promise<{response: http.ClientResponse, body: model.TableCellResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{tableRowPath}/cells/{index}"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "tableRowPath" + "}", String(requestObj.tableRowPath))
            .replace("{" + "index" + "}", String(requestObj.index));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling getTableCell.');
        }

        // verify required parameter 'requestObj.tableRowPath' is not null or undefined
        if (requestObj.tableRowPath === null || requestObj.tableRowPath === undefined) {
            throw new Error('Required parameter "requestObj.tableRowPath" was null or undefined when calling getTableCell.');
        }

        // verify required parameter 'requestObj.index' is not null or undefined
        if (requestObj.index === null || requestObj.index === undefined) {
            throw new Error('Required parameter "requestObj.index" was null or undefined when calling getTableCell.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "TableCellResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Return a table cell format.
     * @param name The document name.
     * @param tableRowPath Path to table row.
     * @param index Object&#39;s index
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     */
    public async getTableCellFormat(requestObj: model.getTableCellFormatRequest): Promise<{response: http.ClientResponse, body: model.TableCellFormatResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{tableRowPath}/cells/{index}/cellformat"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "tableRowPath" + "}", String(requestObj.tableRowPath))
            .replace("{" + "index" + "}", String(requestObj.index));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling getTableCellFormat.');
        }

        // verify required parameter 'requestObj.tableRowPath' is not null or undefined
        if (requestObj.tableRowPath === null || requestObj.tableRowPath === undefined) {
            throw new Error('Required parameter "requestObj.tableRowPath" was null or undefined when calling getTableCellFormat.');
        }

        // verify required parameter 'requestObj.index' is not null or undefined
        if (requestObj.index === null || requestObj.index === undefined) {
            throw new Error('Required parameter "requestObj.index" was null or undefined when calling getTableCellFormat.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "TableCellFormatResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Return a table properties.
     * @param name The document name.
     * @param index Object&#39;s index
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param nodePath Path to node, which contains tables.
     */
    public async getTableProperties(requestObj: model.getTablePropertiesRequest): Promise<{response: http.ClientResponse, body: model.TablePropertiesResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/tables/{index}/properties"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "index" + "}", String(requestObj.index));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling getTableProperties.');
        }

        // verify required parameter 'requestObj.index' is not null or undefined
        if (requestObj.index === null || requestObj.index === undefined) {
            throw new Error('Required parameter "requestObj.index" was null or undefined when calling getTableProperties.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.nodePath !== undefined) {
            queryParameters.NodePath = ObjectSerializer.serialize(requestObj.nodePath, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "TablePropertiesResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Return a table row.
     * @param name The document name.
     * @param tablePath Path to table.
     * @param index Object&#39;s index
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     */
    public async getTableRow(requestObj: model.getTableRowRequest): Promise<{response: http.ClientResponse, body: model.TableRowResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{tablePath}/rows/{index}"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "tablePath" + "}", String(requestObj.tablePath))
            .replace("{" + "index" + "}", String(requestObj.index));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling getTableRow.');
        }

        // verify required parameter 'requestObj.tablePath' is not null or undefined
        if (requestObj.tablePath === null || requestObj.tablePath === undefined) {
            throw new Error('Required parameter "requestObj.tablePath" was null or undefined when calling getTableRow.');
        }

        // verify required parameter 'requestObj.index' is not null or undefined
        if (requestObj.index === null || requestObj.index === undefined) {
            throw new Error('Required parameter "requestObj.index" was null or undefined when calling getTableRow.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "TableRowResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Return a table row format.
     * @param name The document name.
     * @param tablePath Path to table.
     * @param index Object&#39;s index
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     */
    public async getTableRowFormat(requestObj: model.getTableRowFormatRequest): Promise<{response: http.ClientResponse, body: model.TableRowFormatResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{tablePath}/rows/{index}/rowformat"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "tablePath" + "}", String(requestObj.tablePath))
            .replace("{" + "index" + "}", String(requestObj.index));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling getTableRowFormat.');
        }

        // verify required parameter 'requestObj.tablePath' is not null or undefined
        if (requestObj.tablePath === null || requestObj.tablePath === undefined) {
            throw new Error('Required parameter "requestObj.tablePath" was null or undefined when calling getTableRowFormat.');
        }

        // verify required parameter 'requestObj.index' is not null or undefined
        if (requestObj.index === null || requestObj.index === undefined) {
            throw new Error('Required parameter "requestObj.index" was null or undefined when calling getTableRowFormat.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "TableRowFormatResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Return a list of tables that are contained in the document.
     * @param name The document name.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param nodePath Path to node, which contains tables.
     */
    public async getTables(requestObj: model.getTablesRequest): Promise<{response: http.ClientResponse, body: model.TableLinkCollectionResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/tables"
            .replace("{" + "name" + "}", String(requestObj.name));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling getTables.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.nodePath !== undefined) {
            queryParameters.NodePath = ObjectSerializer.serialize(requestObj.nodePath, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "TableLinkCollectionResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Adds table to document, returns added table's data.             
     * @param name The document name.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     * @param revisionDateTime The date and time to use for revisions.
     * @param table Table parameters/
     * @param nodePath Path to node, which contains tables.
     */
    public async insertTable(requestObj: model.insertTableRequest): Promise<{response: http.ClientResponse, body: model.TableResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/tables"
            .replace("{" + "name" + "}", String(requestObj.name));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling insertTable.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.revisionAuthor !== undefined) {
            queryParameters.RevisionAuthor = ObjectSerializer.serialize(requestObj.revisionAuthor, "string");
        }

        if (requestObj.revisionDateTime !== undefined) {
            queryParameters.RevisionDateTime = ObjectSerializer.serialize(requestObj.revisionDateTime, "string");
        }

        if (requestObj.nodePath !== undefined) {
            queryParameters.NodePath = ObjectSerializer.serialize(requestObj.nodePath, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "PUT",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
            body: ObjectSerializer.serialize(requestObj.table, "TableInsert"),
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "TableResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Adds table cell to table, returns added cell's data.             
     * @param name The document name.
     * @param tableRowPath Path to table row.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     * @param revisionDateTime The date and time to use for revisions.
     * @param cell Table cell parameters/
     */
    public async insertTableCell(requestObj: model.insertTableCellRequest): Promise<{response: http.ClientResponse, body: model.TableCellResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{tableRowPath}/cells"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "tableRowPath" + "}", String(requestObj.tableRowPath));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling insertTableCell.');
        }

        // verify required parameter 'requestObj.tableRowPath' is not null or undefined
        if (requestObj.tableRowPath === null || requestObj.tableRowPath === undefined) {
            throw new Error('Required parameter "requestObj.tableRowPath" was null or undefined when calling insertTableCell.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.revisionAuthor !== undefined) {
            queryParameters.RevisionAuthor = ObjectSerializer.serialize(requestObj.revisionAuthor, "string");
        }

        if (requestObj.revisionDateTime !== undefined) {
            queryParameters.RevisionDateTime = ObjectSerializer.serialize(requestObj.revisionDateTime, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "PUT",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
            body: ObjectSerializer.serialize(requestObj.cell, "TableCellInsert"),
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "TableCellResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Adds table row to table, returns added row's data.             
     * @param name The document name.
     * @param tablePath Path to table.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     * @param revisionDateTime The date and time to use for revisions.
     * @param row Table row parameters/
     */
    public async insertTableRow(requestObj: model.insertTableRowRequest): Promise<{response: http.ClientResponse, body: model.TableRowResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{tablePath}/rows"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "tablePath" + "}", String(requestObj.tablePath));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling insertTableRow.');
        }

        // verify required parameter 'requestObj.tablePath' is not null or undefined
        if (requestObj.tablePath === null || requestObj.tablePath === undefined) {
            throw new Error('Required parameter "requestObj.tablePath" was null or undefined when calling insertTableRow.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.revisionAuthor !== undefined) {
            queryParameters.RevisionAuthor = ObjectSerializer.serialize(requestObj.revisionAuthor, "string");
        }

        if (requestObj.revisionDateTime !== undefined) {
            queryParameters.RevisionDateTime = ObjectSerializer.serialize(requestObj.revisionDateTime, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "PUT",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
            body: ObjectSerializer.serialize(requestObj.row, "TableRowInsert"),
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "TableRowResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Append documents to original document.
     * @param name Original document name.
     * @param documentList with a list of documents to append.            
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     * @param revisionDateTime The date and time to use for revisions.
     */
    public async postAppendDocument(requestObj: model.postAppendDocumentRequest): Promise<{response: http.ClientResponse, body: model.DocumentResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/appendDocument"
            .replace("{" + "name" + "}", String(requestObj.name));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling postAppendDocument.');
        }

        // verify required parameter 'requestObj.documentList' is not null or undefined
        if (requestObj.documentList === null || requestObj.documentList === undefined) {
            throw new Error('Required parameter "requestObj.documentList" was null or undefined when calling postAppendDocument.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.revisionAuthor !== undefined) {
            queryParameters.RevisionAuthor = ObjectSerializer.serialize(requestObj.revisionAuthor, "string");
        }

        if (requestObj.revisionDateTime !== undefined) {
            queryParameters.RevisionDateTime = ObjectSerializer.serialize(requestObj.revisionDateTime, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "POST",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
            body: ObjectSerializer.serialize(requestObj.documentList, "DocumentEntryList"),
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "DocumentResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Change document protection.
     * @param name The document name.
     * @param protectionRequest with protection settings.            
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    public async postChangeDocumentProtection(requestObj: model.postChangeDocumentProtectionRequest): Promise<{response: http.ClientResponse, body: model.ProtectionDataResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/protection"
            .replace("{" + "name" + "}", String(requestObj.name));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling postChangeDocumentProtection.');
        }

        // verify required parameter 'requestObj.protectionRequest' is not null or undefined
        if (requestObj.protectionRequest === null || requestObj.protectionRequest === undefined) {
            throw new Error('Required parameter "requestObj.protectionRequest" was null or undefined when calling postChangeDocumentProtection.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "POST",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
            body: ObjectSerializer.serialize(requestObj.protectionRequest, "ProtectionRequest"),
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "ProtectionDataResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Updates the comment, returns updated comment's data.
     * @param name The document name.
     * @param commentIndex Comment index
     * @param comment Comment data.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     * @param revisionDateTime The date and time to use for revisions.
     */
    public async postComment(requestObj: model.postCommentRequest): Promise<{response: http.ClientResponse, body: model.CommentResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/comments/{commentIndex}"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "commentIndex" + "}", String(requestObj.commentIndex));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling postComment.');
        }

        // verify required parameter 'requestObj.commentIndex' is not null or undefined
        if (requestObj.commentIndex === null || requestObj.commentIndex === undefined) {
            throw new Error('Required parameter "requestObj.commentIndex" was null or undefined when calling postComment.');
        }

        // verify required parameter 'requestObj.comment' is not null or undefined
        if (requestObj.comment === null || requestObj.comment === undefined) {
            throw new Error('Required parameter "requestObj.comment" was null or undefined when calling postComment.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.revisionAuthor !== undefined) {
            queryParameters.RevisionAuthor = ObjectSerializer.serialize(requestObj.revisionAuthor, "string");
        }

        if (requestObj.revisionDateTime !== undefined) {
            queryParameters.RevisionDateTime = ObjectSerializer.serialize(requestObj.revisionDateTime, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "POST",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
            body: ObjectSerializer.serialize(requestObj.comment, "Comment"),
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "CommentResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Compare document with original document.
     * @param name Original document name.
     * @param compareData with a document to compare.            
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    public async postCompareDocument(requestObj: model.postCompareDocumentRequest): Promise<{response: http.ClientResponse, body: model.DocumentResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/compareDocument"
            .replace("{" + "name" + "}", String(requestObj.name));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling postCompareDocument.');
        }

        // verify required parameter 'requestObj.compareData' is not null or undefined
        if (requestObj.compareData === null || requestObj.compareData === undefined) {
            throw new Error('Required parameter "requestObj.compareData" was null or undefined when calling postCompareDocument.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "POST",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
            body: ObjectSerializer.serialize(requestObj.compareData, "CompareData"),
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "DocumentResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Execute document mail merge operation.
     * @param name The document name.
     * @param withRegions With regions flag.
     * @param data Mail merge data
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param mailMergeDataFile Mail merge data.
     * @param cleanup Clean up options.
     * @param useWholeParagraphAsRegion Gets or sets a value indicating whether paragraph with TableStart or              TableEnd field should be fully included into mail merge region or particular range between TableStart and TableEnd fields.              The default value is true.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved with autogenerated name.
     */
    public async postDocumentExecuteMailMerge(requestObj: model.postDocumentExecuteMailMergeRequest): Promise<{response: http.ClientResponse, body: model.DocumentResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/executeMailMerge"
            .replace("{" + "name" + "}", String(requestObj.name));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling postDocumentExecuteMailMerge.');
        }

        // verify required parameter 'requestObj.withRegions' is not null or undefined
        if (requestObj.withRegions === null || requestObj.withRegions === undefined) {
            throw new Error('Required parameter "requestObj.withRegions" was null or undefined when calling postDocumentExecuteMailMerge.');
        }

        if (requestObj.withRegions !== undefined) {
            queryParameters.WithRegions = ObjectSerializer.serialize(requestObj.withRegions, "boolean");
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.mailMergeDataFile !== undefined) {
            queryParameters.MailMergeDataFile = ObjectSerializer.serialize(requestObj.mailMergeDataFile, "string");
        }

        if (requestObj.cleanup !== undefined) {
            queryParameters.Cleanup = ObjectSerializer.serialize(requestObj.cleanup, "string");
        }

        if (requestObj.useWholeParagraphAsRegion !== undefined) {
            queryParameters.UseWholeParagraphAsRegion = ObjectSerializer.serialize(requestObj.useWholeParagraphAsRegion, "boolean");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        if (requestObj.data !== undefined) {
            formParams.Data = ObjectSerializer.serialize(requestObj.data, "string");
        }

        const requestOptions: request.Options = {
            method: "POST",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "DocumentResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Updates font properties, returns updated font data.
     * @param name The document name.
     * @param fontDto Font dto object
     * @param paragraphPath Path to parent paragraph.
     * @param index Object&#39;s index
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     * @param revisionDateTime The date and time to use for revisions.
     */
    public async postDocumentParagraphRunFont(requestObj: model.postDocumentParagraphRunFontRequest): Promise<{response: http.ClientResponse, body: model.FontResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{paragraphPath}/runs/{index}/font"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "paragraphPath" + "}", String(requestObj.paragraphPath))
            .replace("{" + "index" + "}", String(requestObj.index));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling postDocumentParagraphRunFont.');
        }

        // verify required parameter 'requestObj.fontDto' is not null or undefined
        if (requestObj.fontDto === null || requestObj.fontDto === undefined) {
            throw new Error('Required parameter "requestObj.fontDto" was null or undefined when calling postDocumentParagraphRunFont.');
        }

        // verify required parameter 'requestObj.paragraphPath' is not null or undefined
        if (requestObj.paragraphPath === null || requestObj.paragraphPath === undefined) {
            throw new Error('Required parameter "requestObj.paragraphPath" was null or undefined when calling postDocumentParagraphRunFont.');
        }

        // verify required parameter 'requestObj.index' is not null or undefined
        if (requestObj.index === null || requestObj.index === undefined) {
            throw new Error('Required parameter "requestObj.index" was null or undefined when calling postDocumentParagraphRunFont.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.revisionAuthor !== undefined) {
            queryParameters.RevisionAuthor = ObjectSerializer.serialize(requestObj.revisionAuthor, "string");
        }

        if (requestObj.revisionDateTime !== undefined) {
            queryParameters.RevisionDateTime = ObjectSerializer.serialize(requestObj.revisionDateTime, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "POST",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
            body: ObjectSerializer.serialize(requestObj.fontDto, "Font"),
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "FontResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Convert document to destination format with detailed settings and save result to storage.
     * @param name The document name.
     * @param saveOptionsData Save options.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param fontsLocation Folder in filestorage with custom fonts.
     */
    public async postDocumentSaveAs(requestObj: model.postDocumentSaveAsRequest): Promise<{response: http.ClientResponse, body: model.SaveResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/saveAs"
            .replace("{" + "name" + "}", String(requestObj.name));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling postDocumentSaveAs.');
        }

        // verify required parameter 'requestObj.saveOptionsData' is not null or undefined
        if (requestObj.saveOptionsData === null || requestObj.saveOptionsData === undefined) {
            throw new Error('Required parameter "requestObj.saveOptionsData" was null or undefined when calling postDocumentSaveAs.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.fontsLocation !== undefined) {
            queryParameters.FontsLocation = ObjectSerializer.serialize(requestObj.fontsLocation, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "POST",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
            body: ObjectSerializer.serialize(requestObj.saveOptionsData, "SaveOptionsData"),
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "SaveResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Updates drawing object, returns updated  drawing object's data.
     * @param name The document name.
     * @param drawingObject Drawing object parameters
     * @param imageFile File with image
     * @param index Object&#39;s index
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     * @param revisionDateTime The date and time to use for revisions.
     * @param nodePath Path to node, which contains collection of drawing objects.
     */
    public async postDrawingObject(requestObj: model.postDrawingObjectRequest): Promise<{response: http.ClientResponse, body: model.DrawingObjectResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/drawingObjects/{index}"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "index" + "}", String(requestObj.index));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling postDrawingObject.');
        }

        // verify required parameter 'requestObj.drawingObject' is not null or undefined
        if (requestObj.drawingObject === null || requestObj.drawingObject === undefined) {
            throw new Error('Required parameter "requestObj.drawingObject" was null or undefined when calling postDrawingObject.');
        }

        // verify required parameter 'requestObj.imageFile' is not null or undefined
        if (requestObj.imageFile === null || requestObj.imageFile === undefined) {
            throw new Error('Required parameter "requestObj.imageFile" was null or undefined when calling postDrawingObject.');
        }

        // verify required parameter 'requestObj.index' is not null or undefined
        if (requestObj.index === null || requestObj.index === undefined) {
            throw new Error('Required parameter "requestObj.index" was null or undefined when calling postDrawingObject.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.revisionAuthor !== undefined) {
            queryParameters.RevisionAuthor = ObjectSerializer.serialize(requestObj.revisionAuthor, "string");
        }

        if (requestObj.revisionDateTime !== undefined) {
            queryParameters.RevisionDateTime = ObjectSerializer.serialize(requestObj.revisionDateTime, "string");
        }

        if (requestObj.nodePath !== undefined) {
            queryParameters.NodePath = ObjectSerializer.serialize(requestObj.nodePath, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        if (requestObj.drawingObject !== undefined) {
            formParams.DrawingObject = ObjectSerializer.serialize(requestObj.drawingObject, "string");
        }

        if (requestObj.imageFile !== undefined) {
            formParams.ImageFile = requestObj.imageFile;
        }
        useFormData = true;

        const requestOptions: request.Options = {
            method: "POST",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "DrawingObjectResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Populate document template with data.
     * @param name The template document name.
     * @param data Mail merge data
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param cleanup Clean up options.
     * @param useWholeParagraphAsRegion Gets or sets a value indicating whether paragraph with TableStart or  TableEnd field should be fully included into mail merge region or particular range between TableStart and TableEnd fields.   The default value is true.
     * @param withRegions Merge with regions or not. True by default
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved with autogenerated name.
     */
    public async postExecuteTemplate(requestObj: model.postExecuteTemplateRequest): Promise<{response: http.ClientResponse, body: model.DocumentResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/executeTemplate"
            .replace("{" + "name" + "}", String(requestObj.name));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling postExecuteTemplate.');
        }

        // verify required parameter 'requestObj.data' is not null or undefined
        if (requestObj.data === null || requestObj.data === undefined) {
            throw new Error('Required parameter "requestObj.data" was null or undefined when calling postExecuteTemplate.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.cleanup !== undefined) {
            queryParameters.Cleanup = ObjectSerializer.serialize(requestObj.cleanup, "string");
        }

        if (requestObj.useWholeParagraphAsRegion !== undefined) {
            queryParameters.UseWholeParagraphAsRegion = ObjectSerializer.serialize(requestObj.useWholeParagraphAsRegion, "boolean");
        }

        if (requestObj.withRegions !== undefined) {
            queryParameters.WithRegions = ObjectSerializer.serialize(requestObj.withRegions, "boolean");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        if (requestObj.data !== undefined) {
            formParams.Data = ObjectSerializer.serialize(requestObj.data, "string");
        }

        const requestOptions: request.Options = {
            method: "POST",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "DocumentResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Updates field's properties, returns updated field's data.
     * @param name The document name.
     * @param field Field data.
     * @param index Object&#39;s index
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     * @param revisionDateTime The date and time to use for revisions.
     * @param nodePath Path to node, which contains collection of fields.
     */
    public async postField(requestObj: model.postFieldRequest): Promise<{response: http.ClientResponse, body: model.FieldResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/fields/{index}"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "index" + "}", String(requestObj.index));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling postField.');
        }

        // verify required parameter 'requestObj.field' is not null or undefined
        if (requestObj.field === null || requestObj.field === undefined) {
            throw new Error('Required parameter "requestObj.field" was null or undefined when calling postField.');
        }

        // verify required parameter 'requestObj.index' is not null or undefined
        if (requestObj.index === null || requestObj.index === undefined) {
            throw new Error('Required parameter "requestObj.index" was null or undefined when calling postField.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.revisionAuthor !== undefined) {
            queryParameters.RevisionAuthor = ObjectSerializer.serialize(requestObj.revisionAuthor, "string");
        }

        if (requestObj.revisionDateTime !== undefined) {
            queryParameters.RevisionDateTime = ObjectSerializer.serialize(requestObj.revisionDateTime, "string");
        }

        if (requestObj.nodePath !== undefined) {
            queryParameters.NodePath = ObjectSerializer.serialize(requestObj.nodePath, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "POST",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
            body: ObjectSerializer.serialize(requestObj.field, "Field"),
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "FieldResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Updates footnote's properties, returns updated run's data.
     * @param name The document name.
     * @param footnoteDto Footnote data.
     * @param index Object&#39;s index
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     * @param revisionDateTime The date and time to use for revisions.
     * @param nodePath Path to node, which contains collection of footnotes.
     */
    public async postFootnote(requestObj: model.postFootnoteRequest): Promise<{response: http.ClientResponse, body: model.FootnoteResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/footnotes/{index}"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "index" + "}", String(requestObj.index));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling postFootnote.');
        }

        // verify required parameter 'requestObj.footnoteDto' is not null or undefined
        if (requestObj.footnoteDto === null || requestObj.footnoteDto === undefined) {
            throw new Error('Required parameter "requestObj.footnoteDto" was null or undefined when calling postFootnote.');
        }

        // verify required parameter 'requestObj.index' is not null or undefined
        if (requestObj.index === null || requestObj.index === undefined) {
            throw new Error('Required parameter "requestObj.index" was null or undefined when calling postFootnote.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.revisionAuthor !== undefined) {
            queryParameters.RevisionAuthor = ObjectSerializer.serialize(requestObj.revisionAuthor, "string");
        }

        if (requestObj.revisionDateTime !== undefined) {
            queryParameters.RevisionDateTime = ObjectSerializer.serialize(requestObj.revisionDateTime, "string");
        }

        if (requestObj.nodePath !== undefined) {
            queryParameters.NodePath = ObjectSerializer.serialize(requestObj.nodePath, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "POST",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
            body: ObjectSerializer.serialize(requestObj.footnoteDto, "Footnote"),
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "FootnoteResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Updates properties of form field, returns updated form field.
     * @param name The document name.
     * @param formField From field data.
     * @param index Object&#39;s index
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     * @param revisionDateTime The date and time to use for revisions.
     * @param nodePath Path to node that contains collection of formfields.
     */
    public async postFormField(requestObj: model.postFormFieldRequest): Promise<{response: http.ClientResponse, body: model.FormFieldResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/formfields/{index}"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "index" + "}", String(requestObj.index));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling postFormField.');
        }

        // verify required parameter 'requestObj.formField' is not null or undefined
        if (requestObj.formField === null || requestObj.formField === undefined) {
            throw new Error('Required parameter "requestObj.formField" was null or undefined when calling postFormField.');
        }

        // verify required parameter 'requestObj.index' is not null or undefined
        if (requestObj.index === null || requestObj.index === undefined) {
            throw new Error('Required parameter "requestObj.index" was null or undefined when calling postFormField.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.revisionAuthor !== undefined) {
            queryParameters.RevisionAuthor = ObjectSerializer.serialize(requestObj.revisionAuthor, "string");
        }

        if (requestObj.revisionDateTime !== undefined) {
            queryParameters.RevisionDateTime = ObjectSerializer.serialize(requestObj.revisionDateTime, "string");
        }

        if (requestObj.nodePath !== undefined) {
            queryParameters.NodePath = ObjectSerializer.serialize(requestObj.nodePath, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "POST",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
            body: ObjectSerializer.serialize(requestObj.formField, "FormField"),
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "FormFieldResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Insert document watermark image.
     * @param name The document name.
     * @param imageFile File with image
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     * @param revisionDateTime The date and time to use for revisions.
     * @param rotationAngle The watermark rotation angle.
     * @param image The image file server full name. If the name is empty the image is expected in request content.
     */
    public async postInsertDocumentWatermarkImage(requestObj: model.postInsertDocumentWatermarkImageRequest): Promise<{response: http.ClientResponse, body: model.DocumentResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/watermark/insertImage"
            .replace("{" + "name" + "}", String(requestObj.name));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling postInsertDocumentWatermarkImage.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.revisionAuthor !== undefined) {
            queryParameters.RevisionAuthor = ObjectSerializer.serialize(requestObj.revisionAuthor, "string");
        }

        if (requestObj.revisionDateTime !== undefined) {
            queryParameters.RevisionDateTime = ObjectSerializer.serialize(requestObj.revisionDateTime, "string");
        }

        if (requestObj.rotationAngle !== undefined) {
            queryParameters.RotationAngle = ObjectSerializer.serialize(requestObj.rotationAngle, "number");
        }

        if (requestObj.image !== undefined) {
            queryParameters.Image = ObjectSerializer.serialize(requestObj.image, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        if (requestObj.imageFile !== undefined) {
            formParams.ImageFile = requestObj.imageFile;
        }
        useFormData = true;

        const requestOptions: request.Options = {
            method: "POST",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "DocumentResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Insert document watermark text.
     * @param name The document name.
     * @param watermarkText with the watermark data.            
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     * @param revisionDateTime The date and time to use for revisions.
     */
    public async postInsertDocumentWatermarkText(requestObj: model.postInsertDocumentWatermarkTextRequest): Promise<{response: http.ClientResponse, body: model.DocumentResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/watermark/insertText"
            .replace("{" + "name" + "}", String(requestObj.name));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling postInsertDocumentWatermarkText.');
        }

        // verify required parameter 'requestObj.watermarkText' is not null or undefined
        if (requestObj.watermarkText === null || requestObj.watermarkText === undefined) {
            throw new Error('Required parameter "requestObj.watermarkText" was null or undefined when calling postInsertDocumentWatermarkText.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.revisionAuthor !== undefined) {
            queryParameters.RevisionAuthor = ObjectSerializer.serialize(requestObj.revisionAuthor, "string");
        }

        if (requestObj.revisionDateTime !== undefined) {
            queryParameters.RevisionDateTime = ObjectSerializer.serialize(requestObj.revisionDateTime, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "POST",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
            body: ObjectSerializer.serialize(requestObj.watermarkText, "WatermarkText"),
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "DocumentResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Insert document page numbers.
     * @param name A document name.
     * @param pageNumber with the page numbers settings.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     * @param revisionDateTime The date and time to use for revisions.
     */
    public async postInsertPageNumbers(requestObj: model.postInsertPageNumbersRequest): Promise<{response: http.ClientResponse, body: model.DocumentResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/insertPageNumbers"
            .replace("{" + "name" + "}", String(requestObj.name));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling postInsertPageNumbers.');
        }

        // verify required parameter 'requestObj.pageNumber' is not null or undefined
        if (requestObj.pageNumber === null || requestObj.pageNumber === undefined) {
            throw new Error('Required parameter "requestObj.pageNumber" was null or undefined when calling postInsertPageNumbers.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.revisionAuthor !== undefined) {
            queryParameters.RevisionAuthor = ObjectSerializer.serialize(requestObj.revisionAuthor, "string");
        }

        if (requestObj.revisionDateTime !== undefined) {
            queryParameters.RevisionDateTime = ObjectSerializer.serialize(requestObj.revisionDateTime, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "POST",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
            body: ObjectSerializer.serialize(requestObj.pageNumber, "PageNumber"),
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "DocumentResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Loads new document from web into the file with any supported format of data.
     * @param data Parameters of loading.
     * @param storage File storage, which have to be used.
     */
    public async postLoadWebDocument(requestObj: model.postLoadWebDocumentRequest): Promise<{response: http.ClientResponse, body: model.SaveResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/loadWebDocument";
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.data' is not null or undefined
        if (requestObj.data === null || requestObj.data === undefined) {
            throw new Error('Required parameter "requestObj.data" was null or undefined when calling postLoadWebDocument.');
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "POST",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
            body: ObjectSerializer.serialize(requestObj.data, "LoadWebDocumentData"),
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "SaveResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Replace document text.
     * @param name The document name.
     * @param replaceText with the replace operation settings.            
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     * @param revisionDateTime The date and time to use for revisions.
     */
    public async postReplaceText(requestObj: model.postReplaceTextRequest): Promise<{response: http.ClientResponse, body: model.ReplaceTextResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/replaceText"
            .replace("{" + "name" + "}", String(requestObj.name));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling postReplaceText.');
        }

        // verify required parameter 'requestObj.replaceText' is not null or undefined
        if (requestObj.replaceText === null || requestObj.replaceText === undefined) {
            throw new Error('Required parameter "requestObj.replaceText" was null or undefined when calling postReplaceText.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.revisionAuthor !== undefined) {
            queryParameters.RevisionAuthor = ObjectSerializer.serialize(requestObj.revisionAuthor, "string");
        }

        if (requestObj.revisionDateTime !== undefined) {
            queryParameters.RevisionDateTime = ObjectSerializer.serialize(requestObj.revisionDateTime, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "POST",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
            body: ObjectSerializer.serialize(requestObj.replaceText, "ReplaceTextRequest"),
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "ReplaceTextResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Updates run's properties, returns updated run's data.
     * @param name The document name.
     * @param run Run data.
     * @param paragraphPath Path to parent paragraph.
     * @param index Object&#39;s index
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     * @param revisionDateTime The date and time to use for revisions.
     */
    public async postRun(requestObj: model.postRunRequest): Promise<{response: http.ClientResponse, body: model.RunResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{paragraphPath}/runs/{index}"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "paragraphPath" + "}", String(requestObj.paragraphPath))
            .replace("{" + "index" + "}", String(requestObj.index));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling postRun.');
        }

        // verify required parameter 'requestObj.run' is not null or undefined
        if (requestObj.run === null || requestObj.run === undefined) {
            throw new Error('Required parameter "requestObj.run" was null or undefined when calling postRun.');
        }

        // verify required parameter 'requestObj.paragraphPath' is not null or undefined
        if (requestObj.paragraphPath === null || requestObj.paragraphPath === undefined) {
            throw new Error('Required parameter "requestObj.paragraphPath" was null or undefined when calling postRun.');
        }

        // verify required parameter 'requestObj.index' is not null or undefined
        if (requestObj.index === null || requestObj.index === undefined) {
            throw new Error('Required parameter "requestObj.index" was null or undefined when calling postRun.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.revisionAuthor !== undefined) {
            queryParameters.RevisionAuthor = ObjectSerializer.serialize(requestObj.revisionAuthor, "string");
        }

        if (requestObj.revisionDateTime !== undefined) {
            queryParameters.RevisionDateTime = ObjectSerializer.serialize(requestObj.revisionDateTime, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "POST",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
            body: ObjectSerializer.serialize(requestObj.run, "Run"),
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "RunResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Split document.
     * @param name Original document name.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param format Format to split.
     * @param from Start page.
     * @param to End page.
     * @param zipOutput ZipOutput or not.
     * @param fontsLocation Folder in filestorage with custom fonts.
     */
    public async postSplitDocument(requestObj: model.postSplitDocumentRequest): Promise<{response: http.ClientResponse, body: model.SplitDocumentResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/split"
            .replace("{" + "name" + "}", String(requestObj.name));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling postSplitDocument.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.format !== undefined) {
            queryParameters.Format = ObjectSerializer.serialize(requestObj.format, "string");
        }

        if (requestObj.from !== undefined) {
            queryParameters.From = ObjectSerializer.serialize(requestObj.from, "number");
        }

        if (requestObj.to !== undefined) {
            queryParameters.To = ObjectSerializer.serialize(requestObj.to, "number");
        }

        if (requestObj.zipOutput !== undefined) {
            queryParameters.ZipOutput = ObjectSerializer.serialize(requestObj.zipOutput, "boolean");
        }

        if (requestObj.fontsLocation !== undefined) {
            queryParameters.FontsLocation = ObjectSerializer.serialize(requestObj.fontsLocation, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "POST",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "SplitDocumentResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Update document bookmark.
     * @param name The document name.
     * @param bookmarkData with new bookmark data.            
     * @param bookmarkName The bookmark name.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     * @param revisionDateTime The date and time to use for revisions.
     */
    public async postUpdateDocumentBookmark(requestObj: model.postUpdateDocumentBookmarkRequest): Promise<{response: http.ClientResponse, body: model.BookmarkResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/bookmarks/{bookmarkName}"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "bookmarkName" + "}", String(requestObj.bookmarkName));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling postUpdateDocumentBookmark.');
        }

        // verify required parameter 'requestObj.bookmarkData' is not null or undefined
        if (requestObj.bookmarkData === null || requestObj.bookmarkData === undefined) {
            throw new Error('Required parameter "requestObj.bookmarkData" was null or undefined when calling postUpdateDocumentBookmark.');
        }

        // verify required parameter 'requestObj.bookmarkName' is not null or undefined
        if (requestObj.bookmarkName === null || requestObj.bookmarkName === undefined) {
            throw new Error('Required parameter "requestObj.bookmarkName" was null or undefined when calling postUpdateDocumentBookmark.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.revisionAuthor !== undefined) {
            queryParameters.RevisionAuthor = ObjectSerializer.serialize(requestObj.revisionAuthor, "string");
        }

        if (requestObj.revisionDateTime !== undefined) {
            queryParameters.RevisionDateTime = ObjectSerializer.serialize(requestObj.revisionDateTime, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "POST",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
            body: ObjectSerializer.serialize(requestObj.bookmarkData, "BookmarkData"),
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "BookmarkResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Update (reevaluate) fields in document.
     * @param name The document name.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    public async postUpdateDocumentFields(requestObj: model.postUpdateDocumentFieldsRequest): Promise<{response: http.ClientResponse, body: model.DocumentResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/updateFields"
            .replace("{" + "name" + "}", String(requestObj.name));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling postUpdateDocumentFields.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "POST",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "DocumentResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Adds comment to document, returns inserted comment's data.
     * @param name The document name.
     * @param comment Comment data.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     * @param revisionDateTime The date and time to use for revisions.
     */
    public async putComment(requestObj: model.putCommentRequest): Promise<{response: http.ClientResponse, body: model.CommentResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/comments"
            .replace("{" + "name" + "}", String(requestObj.name));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling putComment.');
        }

        // verify required parameter 'requestObj.comment' is not null or undefined
        if (requestObj.comment === null || requestObj.comment === undefined) {
            throw new Error('Required parameter "requestObj.comment" was null or undefined when calling putComment.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.revisionAuthor !== undefined) {
            queryParameters.RevisionAuthor = ObjectSerializer.serialize(requestObj.revisionAuthor, "string");
        }

        if (requestObj.revisionDateTime !== undefined) {
            queryParameters.RevisionDateTime = ObjectSerializer.serialize(requestObj.revisionDateTime, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "PUT",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
            body: ObjectSerializer.serialize(requestObj.comment, "Comment"),
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "CommentResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Convert document from request content to format specified.
     * @param document Converting document
     * @param format Format to convert.
     * @param storage File storage, which have to be used.
     * @param outPath Path for saving operation result to the local storage.
     * @param fontsLocation Folder in filestorage with custom fonts.
     */
    public async putConvertDocument(requestObj: model.putConvertDocumentRequest): Promise<{response: http.ClientResponse, body: Buffer}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/convert";
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.document' is not null or undefined
        if (requestObj.document === null || requestObj.document === undefined) {
            throw new Error('Required parameter "requestObj.document" was null or undefined when calling putConvertDocument.');
        }

        // verify required parameter 'requestObj.format' is not null or undefined
        if (requestObj.format === null || requestObj.format === undefined) {
            throw new Error('Required parameter "requestObj.format" was null or undefined when calling putConvertDocument.');
        }

        if (requestObj.format !== undefined) {
            queryParameters.Format = ObjectSerializer.serialize(requestObj.format, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.outPath !== undefined) {
            queryParameters.OutPath = ObjectSerializer.serialize(requestObj.outPath, "string");
        }

        if (requestObj.fontsLocation !== undefined) {
            queryParameters.FontsLocation = ObjectSerializer.serialize(requestObj.fontsLocation, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        if (requestObj.document !== undefined) {
            formParams.Document = requestObj.document;
        }
        useFormData = true;

        const requestOptions: request.Options = {
            method: "PUT",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            encoding: null,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "Buffer");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Creates new document. Document is created with format which is recognized from file extensions.  Supported extentions: \".doc\", \".docx\", \".docm\", \".dot\", \".dotm\", \".dotx\", \".flatopc\", \".fopc\", \".flatopc_macro\", \".fopc_macro\", \".flatopc_template\", \".fopc_template\", \".flatopc_template_macro\", \".fopc_template_macro\", \".wordml\", \".wml\", \".rtf\"
     * @param storage File storage, which have to be used.
     * @param fileName The file name.
     * @param folder The document folder.
     */
    public async putCreateDocument(requestObj: model.putCreateDocumentRequest): Promise<{response: http.ClientResponse, body: model.DocumentResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/create";
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.fileName !== undefined) {
            queryParameters.FileName = ObjectSerializer.serialize(requestObj.fileName, "string");
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "PUT",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "DocumentResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Read document field names.
     * @param template File with template
     * @param useNonMergeFields Use non merge fields or not.
     */
    public async putDocumentFieldNames(requestObj: model.putDocumentFieldNamesRequest): Promise<{response: http.ClientResponse, body: model.FieldNamesResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/mailMergeFieldNames";
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.template' is not null or undefined
        if (requestObj.template === null || requestObj.template === undefined) {
            throw new Error('Required parameter "requestObj.template" was null or undefined when calling putDocumentFieldNames.');
        }

        if (requestObj.useNonMergeFields !== undefined) {
            queryParameters.UseNonMergeFields = ObjectSerializer.serialize(requestObj.useNonMergeFields, "boolean");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        if (requestObj.template !== undefined) {
            formParams.Template = requestObj.template;
        }
        useFormData = true;

        const requestOptions: request.Options = {
            method: "PUT",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "FieldNamesResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Convert document to tiff with detailed settings and save result to storage.
     * @param name The document name.
     * @param saveOptions Tiff save options.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param resultFile The resulting file name.
     * @param useAntiAliasing Use antialiasing flag.
     * @param useHighQualityRendering Use high quality flag.
     * @param imageBrightness Brightness for the generated images.
     * @param imageColorMode Color mode for the generated images.
     * @param imageContrast The contrast for the generated images.
     * @param numeralFormat The images numeral format.
     * @param pageCount Number of pages to render.
     * @param pageIndex Page index to start rendering.
     * @param paperColor Background image color.
     * @param pixelFormat The pixel format of generated images.
     * @param resolution The resolution of generated images.
     * @param scale Zoom factor for generated images.
     * @param tiffCompression The compression tipe.
     * @param dmlRenderingMode Optional, default is Fallback.
     * @param dmlEffectsRenderingMode Optional, default is Simplified.
     * @param tiffBinarizationMethod Optional, Tiff binarization method, possible values are: FloydSteinbergDithering, Threshold.
     * @param zipOutput Optional. A value determining zip output or not.
     * @param fontsLocation Folder in filestorage with custom fonts.
     */
    public async putDocumentSaveAsTiff(requestObj: model.putDocumentSaveAsTiffRequest): Promise<{response: http.ClientResponse, body: model.SaveResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/saveAs/tiff"
            .replace("{" + "name" + "}", String(requestObj.name));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling putDocumentSaveAsTiff.');
        }

        // verify required parameter 'requestObj.saveOptions' is not null or undefined
        if (requestObj.saveOptions === null || requestObj.saveOptions === undefined) {
            throw new Error('Required parameter "requestObj.saveOptions" was null or undefined when calling putDocumentSaveAsTiff.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.resultFile !== undefined) {
            queryParameters.ResultFile = ObjectSerializer.serialize(requestObj.resultFile, "string");
        }

        if (requestObj.useAntiAliasing !== undefined) {
            queryParameters.UseAntiAliasing = ObjectSerializer.serialize(requestObj.useAntiAliasing, "boolean");
        }

        if (requestObj.useHighQualityRendering !== undefined) {
            queryParameters.UseHighQualityRendering = ObjectSerializer.serialize(requestObj.useHighQualityRendering, "boolean");
        }

        if (requestObj.imageBrightness !== undefined) {
            queryParameters.ImageBrightness = ObjectSerializer.serialize(requestObj.imageBrightness, "number");
        }

        if (requestObj.imageColorMode !== undefined) {
            queryParameters.ImageColorMode = ObjectSerializer.serialize(requestObj.imageColorMode, "string");
        }

        if (requestObj.imageContrast !== undefined) {
            queryParameters.ImageContrast = ObjectSerializer.serialize(requestObj.imageContrast, "number");
        }

        if (requestObj.numeralFormat !== undefined) {
            queryParameters.NumeralFormat = ObjectSerializer.serialize(requestObj.numeralFormat, "string");
        }

        if (requestObj.pageCount !== undefined) {
            queryParameters.PageCount = ObjectSerializer.serialize(requestObj.pageCount, "number");
        }

        if (requestObj.pageIndex !== undefined) {
            queryParameters.PageIndex = ObjectSerializer.serialize(requestObj.pageIndex, "number");
        }

        if (requestObj.paperColor !== undefined) {
            queryParameters.PaperColor = ObjectSerializer.serialize(requestObj.paperColor, "string");
        }

        if (requestObj.pixelFormat !== undefined) {
            queryParameters.PixelFormat = ObjectSerializer.serialize(requestObj.pixelFormat, "string");
        }

        if (requestObj.resolution !== undefined) {
            queryParameters.Resolution = ObjectSerializer.serialize(requestObj.resolution, "number");
        }

        if (requestObj.scale !== undefined) {
            queryParameters.Scale = ObjectSerializer.serialize(requestObj.scale, "number");
        }

        if (requestObj.tiffCompression !== undefined) {
            queryParameters.TiffCompression = ObjectSerializer.serialize(requestObj.tiffCompression, "string");
        }

        if (requestObj.dmlRenderingMode !== undefined) {
            queryParameters.DmlRenderingMode = ObjectSerializer.serialize(requestObj.dmlRenderingMode, "string");
        }

        if (requestObj.dmlEffectsRenderingMode !== undefined) {
            queryParameters.DmlEffectsRenderingMode = ObjectSerializer.serialize(requestObj.dmlEffectsRenderingMode, "string");
        }

        if (requestObj.tiffBinarizationMethod !== undefined) {
            queryParameters.TiffBinarizationMethod = ObjectSerializer.serialize(requestObj.tiffBinarizationMethod, "string");
        }

        if (requestObj.zipOutput !== undefined) {
            queryParameters.ZipOutput = ObjectSerializer.serialize(requestObj.zipOutput, "boolean");
        }

        if (requestObj.fontsLocation !== undefined) {
            queryParameters.FontsLocation = ObjectSerializer.serialize(requestObj.fontsLocation, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "PUT",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
            body: ObjectSerializer.serialize(requestObj.saveOptions, "TiffSaveOptionsData"),
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "SaveResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Adds  drawing object to document, returns added  drawing object's data.
     * @param name The document name.
     * @param drawingObject Drawing object parameters
     * @param imageFile File with image
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     * @param revisionDateTime The date and time to use for revisions.
     * @param nodePath Path to node, which contains collection of drawing objects.
     */
    public async putDrawingObject(requestObj: model.putDrawingObjectRequest): Promise<{response: http.ClientResponse, body: model.DrawingObjectResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/drawingObjects"
            .replace("{" + "name" + "}", String(requestObj.name));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling putDrawingObject.');
        }

        // verify required parameter 'requestObj.drawingObject' is not null or undefined
        if (requestObj.drawingObject === null || requestObj.drawingObject === undefined) {
            throw new Error('Required parameter "requestObj.drawingObject" was null or undefined when calling putDrawingObject.');
        }

        // verify required parameter 'requestObj.imageFile' is not null or undefined
        if (requestObj.imageFile === null || requestObj.imageFile === undefined) {
            throw new Error('Required parameter "requestObj.imageFile" was null or undefined when calling putDrawingObject.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.revisionAuthor !== undefined) {
            queryParameters.RevisionAuthor = ObjectSerializer.serialize(requestObj.revisionAuthor, "string");
        }

        if (requestObj.revisionDateTime !== undefined) {
            queryParameters.RevisionDateTime = ObjectSerializer.serialize(requestObj.revisionDateTime, "string");
        }

        if (requestObj.nodePath !== undefined) {
            queryParameters.NodePath = ObjectSerializer.serialize(requestObj.nodePath, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        if (requestObj.drawingObject !== undefined) {
            formParams.DrawingObject = ObjectSerializer.serialize(requestObj.drawingObject, "string");
        }

        if (requestObj.imageFile !== undefined) {
            formParams.ImageFile = requestObj.imageFile;
        }
        useFormData = true;

        const requestOptions: request.Options = {
            method: "PUT",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "DrawingObjectResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Execute document mail merge online.
     * @param template File with template
     * @param data File with mailmerge data
     * @param withRegions With regions flag.
     * @param cleanup Clean up options.
     */
    public async putExecuteMailMergeOnline(requestObj: model.putExecuteMailMergeOnlineRequest): Promise<{response: http.ClientResponse, body: Buffer}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/executeMailMerge";
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.template' is not null or undefined
        if (requestObj.template === null || requestObj.template === undefined) {
            throw new Error('Required parameter "requestObj.template" was null or undefined when calling putExecuteMailMergeOnline.');
        }

        // verify required parameter 'requestObj.data' is not null or undefined
        if (requestObj.data === null || requestObj.data === undefined) {
            throw new Error('Required parameter "requestObj.data" was null or undefined when calling putExecuteMailMergeOnline.');
        }

        if (requestObj.withRegions !== undefined) {
            queryParameters.WithRegions = ObjectSerializer.serialize(requestObj.withRegions, "boolean");
        }

        if (requestObj.cleanup !== undefined) {
            queryParameters.Cleanup = ObjectSerializer.serialize(requestObj.cleanup, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        if (requestObj.template !== undefined) {
            formParams.Template = requestObj.template;
        }
        useFormData = true;

        if (requestObj.data !== undefined) {
            formParams.Data = requestObj.data;
        }
        useFormData = true;

        const requestOptions: request.Options = {
            method: "PUT",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            encoding: null,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "Buffer");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Populate document template with data online.
     * @param template File with template
     * @param data File with mailmerge data
     * @param cleanup Clean up options.
     * @param useWholeParagraphAsRegion Gets or sets a value indicating whether paragraph with TableStart or              TableEnd field should be fully included into mail merge region or particular range between TableStart and TableEnd fields.              The default value is true.
     * @param withRegions Merge with regions or not. True by default
     */
    public async putExecuteTemplateOnline(requestObj: model.putExecuteTemplateOnlineRequest): Promise<{response: http.ClientResponse, body: Buffer}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/executeTemplate";
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.template' is not null or undefined
        if (requestObj.template === null || requestObj.template === undefined) {
            throw new Error('Required parameter "requestObj.template" was null or undefined when calling putExecuteTemplateOnline.');
        }

        // verify required parameter 'requestObj.data' is not null or undefined
        if (requestObj.data === null || requestObj.data === undefined) {
            throw new Error('Required parameter "requestObj.data" was null or undefined when calling putExecuteTemplateOnline.');
        }

        if (requestObj.cleanup !== undefined) {
            queryParameters.Cleanup = ObjectSerializer.serialize(requestObj.cleanup, "string");
        }

        if (requestObj.useWholeParagraphAsRegion !== undefined) {
            queryParameters.UseWholeParagraphAsRegion = ObjectSerializer.serialize(requestObj.useWholeParagraphAsRegion, "boolean");
        }

        if (requestObj.withRegions !== undefined) {
            queryParameters.WithRegions = ObjectSerializer.serialize(requestObj.withRegions, "boolean");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        if (requestObj.template !== undefined) {
            formParams.Template = requestObj.template;
        }
        useFormData = true;

        if (requestObj.data !== undefined) {
            formParams.Data = requestObj.data;
        }
        useFormData = true;

        const requestOptions: request.Options = {
            method: "PUT",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            encoding: null,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "Buffer");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Adds field to document, returns inserted field's data.
     * @param name The document name.
     * @param field Field data.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     * @param revisionDateTime The date and time to use for revisions.
     * @param nodePath Path to node, which contains collection of fields.
     * @param insertBeforeNode Field will be inserted before node with id&#x3D;\&quot;nodeId\&quot;.
     */
    public async putField(requestObj: model.putFieldRequest): Promise<{response: http.ClientResponse, body: model.FieldResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/fields"
            .replace("{" + "name" + "}", String(requestObj.name));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling putField.');
        }

        // verify required parameter 'requestObj.field' is not null or undefined
        if (requestObj.field === null || requestObj.field === undefined) {
            throw new Error('Required parameter "requestObj.field" was null or undefined when calling putField.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.revisionAuthor !== undefined) {
            queryParameters.RevisionAuthor = ObjectSerializer.serialize(requestObj.revisionAuthor, "string");
        }

        if (requestObj.revisionDateTime !== undefined) {
            queryParameters.RevisionDateTime = ObjectSerializer.serialize(requestObj.revisionDateTime, "string");
        }

        if (requestObj.nodePath !== undefined) {
            queryParameters.NodePath = ObjectSerializer.serialize(requestObj.nodePath, "string");
        }

        if (requestObj.insertBeforeNode !== undefined) {
            queryParameters.InsertBeforeNode = ObjectSerializer.serialize(requestObj.insertBeforeNode, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "PUT",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
            body: ObjectSerializer.serialize(requestObj.field, "Field"),
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "FieldResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Adds footnote to document, returns added footnote's data.
     * @param name The document name.
     * @param footnoteDto Footnote data.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     * @param revisionDateTime The date and time to use for revisions.
     * @param nodePath Path to node, which contains collection of footnotes.
     */
    public async putFootnote(requestObj: model.putFootnoteRequest): Promise<{response: http.ClientResponse, body: model.FootnoteResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/footnotes"
            .replace("{" + "name" + "}", String(requestObj.name));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling putFootnote.');
        }

        // verify required parameter 'requestObj.footnoteDto' is not null or undefined
        if (requestObj.footnoteDto === null || requestObj.footnoteDto === undefined) {
            throw new Error('Required parameter "requestObj.footnoteDto" was null or undefined when calling putFootnote.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.revisionAuthor !== undefined) {
            queryParameters.RevisionAuthor = ObjectSerializer.serialize(requestObj.revisionAuthor, "string");
        }

        if (requestObj.revisionDateTime !== undefined) {
            queryParameters.RevisionDateTime = ObjectSerializer.serialize(requestObj.revisionDateTime, "string");
        }

        if (requestObj.nodePath !== undefined) {
            queryParameters.NodePath = ObjectSerializer.serialize(requestObj.nodePath, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "PUT",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
            body: ObjectSerializer.serialize(requestObj.footnoteDto, "Footnote"),
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "FootnoteResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Adds form field to paragraph, returns added form field's data.
     * @param name The document name.
     * @param formField From field data.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     * @param revisionDateTime The date and time to use for revisions.
     * @param nodePath Path to node that contains collection of formfields.
     * @param insertBeforeNode Form field will be inserted before node with index.
     */
    public async putFormField(requestObj: model.putFormFieldRequest): Promise<{response: http.ClientResponse, body: model.FormFieldResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/formfields"
            .replace("{" + "name" + "}", String(requestObj.name));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling putFormField.');
        }

        // verify required parameter 'requestObj.formField' is not null or undefined
        if (requestObj.formField === null || requestObj.formField === undefined) {
            throw new Error('Required parameter "requestObj.formField" was null or undefined when calling putFormField.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.revisionAuthor !== undefined) {
            queryParameters.RevisionAuthor = ObjectSerializer.serialize(requestObj.revisionAuthor, "string");
        }

        if (requestObj.revisionDateTime !== undefined) {
            queryParameters.RevisionDateTime = ObjectSerializer.serialize(requestObj.revisionDateTime, "string");
        }

        if (requestObj.nodePath !== undefined) {
            queryParameters.NodePath = ObjectSerializer.serialize(requestObj.nodePath, "string");
        }

        if (requestObj.insertBeforeNode !== undefined) {
            queryParameters.InsertBeforeNode = ObjectSerializer.serialize(requestObj.insertBeforeNode, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "PUT",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
            body: ObjectSerializer.serialize(requestObj.formField, "FormField"),
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "FormFieldResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Insert to document header or footer.
     * @param name The document name.
     * @param headerFooterType Type of header/footer.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     * @param revisionDateTime The date and time to use for revisions.
     * @param sectionPath Path to parent section.
     */
    public async putHeaderFooter(requestObj: model.putHeaderFooterRequest): Promise<{response: http.ClientResponse, body: model.HeaderFooterResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{sectionPath}/headersfooters"
            .replace("{" + "name" + "}", String(requestObj.name));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling putHeaderFooter.');
        }

        // verify required parameter 'requestObj.headerFooterType' is not null or undefined
        if (requestObj.headerFooterType === null || requestObj.headerFooterType === undefined) {
            throw new Error('Required parameter "requestObj.headerFooterType" was null or undefined when calling putHeaderFooter.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.revisionAuthor !== undefined) {
            queryParameters.RevisionAuthor = ObjectSerializer.serialize(requestObj.revisionAuthor, "string");
        }

        if (requestObj.revisionDateTime !== undefined) {
            queryParameters.RevisionDateTime = ObjectSerializer.serialize(requestObj.revisionDateTime, "string");
        }

        if (requestObj.sectionPath !== undefined) {
            queryParameters.SectionPath = ObjectSerializer.serialize(requestObj.sectionPath, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "PUT",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
            body: ObjectSerializer.serialize(requestObj.headerFooterType, "string"),
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "HeaderFooterResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Adds paragraph to document, returns added paragraph's data.
     * @param name The document name.
     * @param paragraph Paragraph data.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     * @param revisionDateTime The date and time to use for revisions.
     * @param nodePath Path to node which contains paragraphs.
     * @param insertBeforeNode Paragraph will be inserted before node with index.
     */
    public async putParagraph(requestObj: model.putParagraphRequest): Promise<{response: http.ClientResponse, body: model.ParagraphResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/paragraphs"
            .replace("{" + "name" + "}", String(requestObj.name));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling putParagraph.');
        }

        // verify required parameter 'requestObj.paragraph' is not null or undefined
        if (requestObj.paragraph === null || requestObj.paragraph === undefined) {
            throw new Error('Required parameter "requestObj.paragraph" was null or undefined when calling putParagraph.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.revisionAuthor !== undefined) {
            queryParameters.RevisionAuthor = ObjectSerializer.serialize(requestObj.revisionAuthor, "string");
        }

        if (requestObj.revisionDateTime !== undefined) {
            queryParameters.RevisionDateTime = ObjectSerializer.serialize(requestObj.revisionDateTime, "string");
        }

        if (requestObj.nodePath !== undefined) {
            queryParameters.NodePath = ObjectSerializer.serialize(requestObj.nodePath, "string");
        }

        if (requestObj.insertBeforeNode !== undefined) {
            queryParameters.InsertBeforeNode = ObjectSerializer.serialize(requestObj.insertBeforeNode, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "PUT",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
            body: ObjectSerializer.serialize(requestObj.paragraph, "ParagraphInsert"),
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "ParagraphResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Protect document.
     * @param name The document name.
     * @param protectionRequest with protection settings.            
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    public async putProtectDocument(requestObj: model.putProtectDocumentRequest): Promise<{response: http.ClientResponse, body: model.ProtectionDataResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/protection"
            .replace("{" + "name" + "}", String(requestObj.name));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling putProtectDocument.');
        }

        // verify required parameter 'requestObj.protectionRequest' is not null or undefined
        if (requestObj.protectionRequest === null || requestObj.protectionRequest === undefined) {
            throw new Error('Required parameter "requestObj.protectionRequest" was null or undefined when calling putProtectDocument.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "PUT",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
            body: ObjectSerializer.serialize(requestObj.protectionRequest, "ProtectionRequest"),
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "ProtectionDataResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Adds run to document, returns added paragraph's data.
     * @param name The document name.
     * @param paragraphPath Path to parent paragraph.
     * @param run Run data.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     * @param revisionDateTime The date and time to use for revisions.
     * @param insertBeforeNode Paragraph will be inserted before node with index.
     */
    public async putRun(requestObj: model.putRunRequest): Promise<{response: http.ClientResponse, body: model.RunResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{paragraphPath}/runs"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "paragraphPath" + "}", String(requestObj.paragraphPath));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling putRun.');
        }

        // verify required parameter 'requestObj.paragraphPath' is not null or undefined
        if (requestObj.paragraphPath === null || requestObj.paragraphPath === undefined) {
            throw new Error('Required parameter "requestObj.paragraphPath" was null or undefined when calling putRun.');
        }

        // verify required parameter 'requestObj.run' is not null or undefined
        if (requestObj.run === null || requestObj.run === undefined) {
            throw new Error('Required parameter "requestObj.run" was null or undefined when calling putRun.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.revisionAuthor !== undefined) {
            queryParameters.RevisionAuthor = ObjectSerializer.serialize(requestObj.revisionAuthor, "string");
        }

        if (requestObj.revisionDateTime !== undefined) {
            queryParameters.RevisionDateTime = ObjectSerializer.serialize(requestObj.revisionDateTime, "string");
        }

        if (requestObj.insertBeforeNode !== undefined) {
            queryParameters.InsertBeforeNode = ObjectSerializer.serialize(requestObj.insertBeforeNode, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "PUT",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
            body: ObjectSerializer.serialize(requestObj.run, "Run"),
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "RunResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Reject all revisions in document
     * @param name The document name.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    public async rejectAllRevisions(requestObj: model.rejectAllRevisionsRequest): Promise<{response: http.ClientResponse, body: model.RevisionsModificationResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/revisions/rejectAll"
            .replace("{" + "name" + "}", String(requestObj.name));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling rejectAllRevisions.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "POST",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "RevisionsModificationResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Renders drawing object to specified format.
     * @param name The file name.
     * @param format The destination format.
     * @param index Object&#39;s index
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param nodePath Path to node, which contains drawing objects.
     * @param fontsLocation Folder in filestorage with custom fonts.
     */
    public async renderDrawingObject(requestObj: model.renderDrawingObjectRequest): Promise<{response: http.ClientResponse, body: Buffer}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/drawingObjects/{index}/render"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "index" + "}", String(requestObj.index));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling renderDrawingObject.');
        }

        // verify required parameter 'requestObj.format' is not null or undefined
        if (requestObj.format === null || requestObj.format === undefined) {
            throw new Error('Required parameter "requestObj.format" was null or undefined when calling renderDrawingObject.');
        }

        // verify required parameter 'requestObj.index' is not null or undefined
        if (requestObj.index === null || requestObj.index === undefined) {
            throw new Error('Required parameter "requestObj.index" was null or undefined when calling renderDrawingObject.');
        }

        if (requestObj.format !== undefined) {
            queryParameters.Format = ObjectSerializer.serialize(requestObj.format, "string");
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.nodePath !== undefined) {
            queryParameters.NodePath = ObjectSerializer.serialize(requestObj.nodePath, "string");
        }

        if (requestObj.fontsLocation !== undefined) {
            queryParameters.FontsLocation = ObjectSerializer.serialize(requestObj.fontsLocation, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            encoding: null,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "Buffer");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Renders math object to specified format.
     * @param name The file name.
     * @param format The destination format.
     * @param index Object&#39;s index
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param nodePath Path to node, which contains office math objects.
     * @param fontsLocation Folder in filestorage with custom fonts.
     */
    public async renderMathObject(requestObj: model.renderMathObjectRequest): Promise<{response: http.ClientResponse, body: Buffer}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/OfficeMathObjects/{index}/render"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "index" + "}", String(requestObj.index));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling renderMathObject.');
        }

        // verify required parameter 'requestObj.format' is not null or undefined
        if (requestObj.format === null || requestObj.format === undefined) {
            throw new Error('Required parameter "requestObj.format" was null or undefined when calling renderMathObject.');
        }

        // verify required parameter 'requestObj.index' is not null or undefined
        if (requestObj.index === null || requestObj.index === undefined) {
            throw new Error('Required parameter "requestObj.index" was null or undefined when calling renderMathObject.');
        }

        if (requestObj.format !== undefined) {
            queryParameters.Format = ObjectSerializer.serialize(requestObj.format, "string");
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.nodePath !== undefined) {
            queryParameters.NodePath = ObjectSerializer.serialize(requestObj.nodePath, "string");
        }

        if (requestObj.fontsLocation !== undefined) {
            queryParameters.FontsLocation = ObjectSerializer.serialize(requestObj.fontsLocation, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            encoding: null,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "Buffer");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Renders page to specified format.
     * @param name The file name.
     * @param pageIndex Comment index
     * @param format The destination format.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param fontsLocation Folder in filestorage with custom fonts.
     */
    public async renderPage(requestObj: model.renderPageRequest): Promise<{response: http.ClientResponse, body: Buffer}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/pages/{pageIndex}/render"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "pageIndex" + "}", String(requestObj.pageIndex));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling renderPage.');
        }

        // verify required parameter 'requestObj.pageIndex' is not null or undefined
        if (requestObj.pageIndex === null || requestObj.pageIndex === undefined) {
            throw new Error('Required parameter "requestObj.pageIndex" was null or undefined when calling renderPage.');
        }

        // verify required parameter 'requestObj.format' is not null or undefined
        if (requestObj.format === null || requestObj.format === undefined) {
            throw new Error('Required parameter "requestObj.format" was null or undefined when calling renderPage.');
        }

        if (requestObj.format !== undefined) {
            queryParameters.Format = ObjectSerializer.serialize(requestObj.format, "string");
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.fontsLocation !== undefined) {
            queryParameters.FontsLocation = ObjectSerializer.serialize(requestObj.fontsLocation, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            encoding: null,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "Buffer");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Renders paragraph to specified format.
     * @param name The file name.
     * @param format The destination format.
     * @param index Object&#39;s index
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param nodePath Path to node, which contains paragraphs.
     * @param fontsLocation Folder in filestorage with custom fonts.
     */
    public async renderParagraph(requestObj: model.renderParagraphRequest): Promise<{response: http.ClientResponse, body: Buffer}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/paragraphs/{index}/render"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "index" + "}", String(requestObj.index));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling renderParagraph.');
        }

        // verify required parameter 'requestObj.format' is not null or undefined
        if (requestObj.format === null || requestObj.format === undefined) {
            throw new Error('Required parameter "requestObj.format" was null or undefined when calling renderParagraph.');
        }

        // verify required parameter 'requestObj.index' is not null or undefined
        if (requestObj.index === null || requestObj.index === undefined) {
            throw new Error('Required parameter "requestObj.index" was null or undefined when calling renderParagraph.');
        }

        if (requestObj.format !== undefined) {
            queryParameters.Format = ObjectSerializer.serialize(requestObj.format, "string");
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.nodePath !== undefined) {
            queryParameters.NodePath = ObjectSerializer.serialize(requestObj.nodePath, "string");
        }

        if (requestObj.fontsLocation !== undefined) {
            queryParameters.FontsLocation = ObjectSerializer.serialize(requestObj.fontsLocation, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            encoding: null,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "Buffer");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Renders table to specified format.
     * @param name The file name.
     * @param format The destination format.
     * @param index Object&#39;s index
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param nodePath Path to node, which contains tables.
     * @param fontsLocation Folder in filestorage with custom fonts.
     */
    public async renderTable(requestObj: model.renderTableRequest): Promise<{response: http.ClientResponse, body: Buffer}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/tables/{index}/render"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "index" + "}", String(requestObj.index));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling renderTable.');
        }

        // verify required parameter 'requestObj.format' is not null or undefined
        if (requestObj.format === null || requestObj.format === undefined) {
            throw new Error('Required parameter "requestObj.format" was null or undefined when calling renderTable.');
        }

        // verify required parameter 'requestObj.index' is not null or undefined
        if (requestObj.index === null || requestObj.index === undefined) {
            throw new Error('Required parameter "requestObj.index" was null or undefined when calling renderTable.');
        }

        if (requestObj.format !== undefined) {
            queryParameters.Format = ObjectSerializer.serialize(requestObj.format, "string");
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.nodePath !== undefined) {
            queryParameters.NodePath = ObjectSerializer.serialize(requestObj.nodePath, "string");
        }

        if (requestObj.fontsLocation !== undefined) {
            queryParameters.FontsLocation = ObjectSerializer.serialize(requestObj.fontsLocation, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            encoding: null,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "Buffer");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Resets font's cache.
     */
    public async resetCache(requestObj: model.resetCacheRequest): Promise<{response: http.ClientResponse, body: model.AsposeResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/fonts/cache";
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "DELETE",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "AsposeResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Search text in document.
     * @param name The document name.
     * @param pattern The regular expression used to find matches.
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     */
    public async search(requestObj: model.searchRequest): Promise<{response: http.ClientResponse, body: model.SearchResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/search"
            .replace("{" + "name" + "}", String(requestObj.name));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling search.');
        }

        // verify required parameter 'requestObj.pattern' is not null or undefined
        if (requestObj.pattern === null || requestObj.pattern === undefined) {
            throw new Error('Required parameter "requestObj.pattern" was null or undefined when calling search.');
        }

        if (requestObj.pattern !== undefined) {
            queryParameters.Pattern = ObjectSerializer.serialize(requestObj.pattern, "string");
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "GET",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "SearchResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Updates border properties.              'nodePath' should refer to node with cell or row
     * @param name The document name.
     * @param borderProperties Border properties
     * @param nodePath Path to node with border(node should be cell or row).
     * @param index Object&#39;s index
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     * @param revisionDateTime The date and time to use for revisions.
     */
    public async updateBorder(requestObj: model.updateBorderRequest): Promise<{response: http.ClientResponse, body: model.BorderResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/borders/{index}"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "nodePath" + "}", String(requestObj.nodePath))
            .replace("{" + "index" + "}", String(requestObj.index));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling updateBorder.');
        }

        // verify required parameter 'requestObj.borderProperties' is not null or undefined
        if (requestObj.borderProperties === null || requestObj.borderProperties === undefined) {
            throw new Error('Required parameter "requestObj.borderProperties" was null or undefined when calling updateBorder.');
        }

        // verify required parameter 'requestObj.nodePath' is not null or undefined
        if (requestObj.nodePath === null || requestObj.nodePath === undefined) {
            throw new Error('Required parameter "requestObj.nodePath" was null or undefined when calling updateBorder.');
        }

        // verify required parameter 'requestObj.index' is not null or undefined
        if (requestObj.index === null || requestObj.index === undefined) {
            throw new Error('Required parameter "requestObj.index" was null or undefined when calling updateBorder.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.revisionAuthor !== undefined) {
            queryParameters.RevisionAuthor = ObjectSerializer.serialize(requestObj.revisionAuthor, "string");
        }

        if (requestObj.revisionDateTime !== undefined) {
            queryParameters.RevisionDateTime = ObjectSerializer.serialize(requestObj.revisionDateTime, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "POST",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
            body: ObjectSerializer.serialize(requestObj.borderProperties, "Border"),
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "BorderResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Update page setup of section.
     * @param name The document name.
     * @param sectionIndex Section index
     * @param pageSetup Page setup properties dto
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     * @param revisionDateTime The date and time to use for revisions.
     */
    public async updateSectionPageSetup(requestObj: model.updateSectionPageSetupRequest): Promise<{response: http.ClientResponse, body: model.SectionPageSetupResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/sections/{sectionIndex}/pageSetup"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "sectionIndex" + "}", String(requestObj.sectionIndex));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling updateSectionPageSetup.');
        }

        // verify required parameter 'requestObj.sectionIndex' is not null or undefined
        if (requestObj.sectionIndex === null || requestObj.sectionIndex === undefined) {
            throw new Error('Required parameter "requestObj.sectionIndex" was null or undefined when calling updateSectionPageSetup.');
        }

        // verify required parameter 'requestObj.pageSetup' is not null or undefined
        if (requestObj.pageSetup === null || requestObj.pageSetup === undefined) {
            throw new Error('Required parameter "requestObj.pageSetup" was null or undefined when calling updateSectionPageSetup.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.revisionAuthor !== undefined) {
            queryParameters.RevisionAuthor = ObjectSerializer.serialize(requestObj.revisionAuthor, "string");
        }

        if (requestObj.revisionDateTime !== undefined) {
            queryParameters.RevisionDateTime = ObjectSerializer.serialize(requestObj.revisionDateTime, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "POST",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
            body: ObjectSerializer.serialize(requestObj.pageSetup, "PageSetup"),
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "SectionPageSetupResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Updates a table cell format.
     * @param name The document name.
     * @param tableRowPath Path to table row.
     * @param index Object&#39;s index
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     * @param revisionDateTime The date and time to use for revisions.
     * @param format The properties.
     */
    public async updateTableCellFormat(requestObj: model.updateTableCellFormatRequest): Promise<{response: http.ClientResponse, body: model.TableCellFormatResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{tableRowPath}/cells/{index}/cellformat"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "tableRowPath" + "}", String(requestObj.tableRowPath))
            .replace("{" + "index" + "}", String(requestObj.index));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling updateTableCellFormat.');
        }

        // verify required parameter 'requestObj.tableRowPath' is not null or undefined
        if (requestObj.tableRowPath === null || requestObj.tableRowPath === undefined) {
            throw new Error('Required parameter "requestObj.tableRowPath" was null or undefined when calling updateTableCellFormat.');
        }

        // verify required parameter 'requestObj.index' is not null or undefined
        if (requestObj.index === null || requestObj.index === undefined) {
            throw new Error('Required parameter "requestObj.index" was null or undefined when calling updateTableCellFormat.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.revisionAuthor !== undefined) {
            queryParameters.RevisionAuthor = ObjectSerializer.serialize(requestObj.revisionAuthor, "string");
        }

        if (requestObj.revisionDateTime !== undefined) {
            queryParameters.RevisionDateTime = ObjectSerializer.serialize(requestObj.revisionDateTime, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "POST",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
            body: ObjectSerializer.serialize(requestObj.format, "TableCellFormat"),
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "TableCellFormatResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Updates a table properties.
     * @param name The document name.
     * @param index Object&#39;s index
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     * @param revisionDateTime The date and time to use for revisions.
     * @param properties The properties.
     * @param nodePath Path to node, which contains tables.
     */
    public async updateTableProperties(requestObj: model.updateTablePropertiesRequest): Promise<{response: http.ClientResponse, body: model.TablePropertiesResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{nodePath}/tables/{index}/properties"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "index" + "}", String(requestObj.index));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling updateTableProperties.');
        }

        // verify required parameter 'requestObj.index' is not null or undefined
        if (requestObj.index === null || requestObj.index === undefined) {
            throw new Error('Required parameter "requestObj.index" was null or undefined when calling updateTableProperties.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.revisionAuthor !== undefined) {
            queryParameters.RevisionAuthor = ObjectSerializer.serialize(requestObj.revisionAuthor, "string");
        }

        if (requestObj.revisionDateTime !== undefined) {
            queryParameters.RevisionDateTime = ObjectSerializer.serialize(requestObj.revisionDateTime, "string");
        }

        if (requestObj.nodePath !== undefined) {
            queryParameters.NodePath = ObjectSerializer.serialize(requestObj.nodePath, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "POST",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
            body: ObjectSerializer.serialize(requestObj.properties, "TableProperties"),
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "TablePropertiesResponse");
        return Promise.resolve({body: result, response});
    }

    /*
     * @summary Updates a table row format.
     * @param name The document name.
     * @param tablePath Path to table.
     * @param index Object&#39;s index
     * @param folder Original document folder.
     * @param storage File storage, which have to be used.
     * @param loadEncoding Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     * @param password Password for opening an encrypted document.
     * @param destFileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     * @param revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     * @param revisionDateTime The date and time to use for revisions.
     * @param format Table row format.
     */
    public async updateTableRowFormat(requestObj: model.updateTableRowFormatRequest): Promise<{response: http.ClientResponse, body: model.TableRowFormatResponse}> {
        const localVarPath = this.configuration.getApiBaseUrl() + "/words/{name}/{tablePath}/rows/{index}/rowformat"
            .replace("{" + "name" + "}", String(requestObj.name))
            .replace("{" + "tablePath" + "}", String(requestObj.tablePath))
            .replace("{" + "index" + "}", String(requestObj.index));
        const queryParameters: any = {};
        const headerParams: any = {};
        const formParams: any = {};

        // verify required parameter 'requestObj.name' is not null or undefined
        if (requestObj.name === null || requestObj.name === undefined) {
            throw new Error('Required parameter "requestObj.name" was null or undefined when calling updateTableRowFormat.');
        }

        // verify required parameter 'requestObj.tablePath' is not null or undefined
        if (requestObj.tablePath === null || requestObj.tablePath === undefined) {
            throw new Error('Required parameter "requestObj.tablePath" was null or undefined when calling updateTableRowFormat.');
        }

        // verify required parameter 'requestObj.index' is not null or undefined
        if (requestObj.index === null || requestObj.index === undefined) {
            throw new Error('Required parameter "requestObj.index" was null or undefined when calling updateTableRowFormat.');
        }

        if (requestObj.folder !== undefined) {
            queryParameters.Folder = ObjectSerializer.serialize(requestObj.folder, "string");
        }

        if (requestObj.storage !== undefined) {
            queryParameters.Storage = ObjectSerializer.serialize(requestObj.storage, "string");
        }

        if (requestObj.loadEncoding !== undefined) {
            queryParameters.LoadEncoding = ObjectSerializer.serialize(requestObj.loadEncoding, "string");
        }

        if (requestObj.password !== undefined) {
            queryParameters.Password = ObjectSerializer.serialize(requestObj.password, "string");
        }

        if (requestObj.destFileName !== undefined) {
            queryParameters.DestFileName = ObjectSerializer.serialize(requestObj.destFileName, "string");
        }

        if (requestObj.revisionAuthor !== undefined) {
            queryParameters.RevisionAuthor = ObjectSerializer.serialize(requestObj.revisionAuthor, "string");
        }

        if (requestObj.revisionDateTime !== undefined) {
            queryParameters.RevisionDateTime = ObjectSerializer.serialize(requestObj.revisionDateTime, "string");
        }

        // tslint:disable-next-line:prefer-const
        let useFormData = false;

        const requestOptions: request.Options = {
            method: "POST",
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            json: true,
            body: ObjectSerializer.serialize(requestObj.format, "TableRowFormat"),
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (requestOptions as any).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        const response = await invokeApiMethod(requestOptions, this.configuration);
        const result =  ObjectSerializer.deserialize(response.body, "TableRowFormatResponse");
        return Promise.resolve({body: result, response});
    }

}
